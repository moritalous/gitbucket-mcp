{
    "openapi": "3.0.2",
    "info": {
        "title": "GitBucket API",
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080",
            "description": "GitBucket"
        }
    ],
    "paths": {
        "/api/v3/": {
            "get": {
                "tags": [
                    "base"
                ],
                "summary": "Root Endpoint",
                "description": "Root endpoint for GitBucket API.\n\nReturns:\n    ApiEndPoint: Basic API endpoint information",
                "operationId": "root_endpoint_api_v3__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiEndPoint"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/rate_limit": {
            "get": {
                "tags": [
                    "base"
                ],
                "summary": "Rate Limit",
                "description": "Get rate limit status.\n\nIn GitBucket, rate limiting is not enabled, so this returns a 404 error.\n\nReturns:\n    JSONResponse: Error message indicating rate limiting is not enabled",
                "operationId": "rate_limit_api_v3_rate_limit_get",
                "responses": {
                    "404": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/gitbucket/plugins": {
            "get": {
                "tags": [
                    "base"
                ],
                "summary": "List Plugins",
                "description": "List installed GitBucket plugins.\n\nThis is a non-GitHub compatible API specific to GitBucket.\n\nReturns:\n    List[ApiPlugin]: List of installed plugins",
                "operationId": "list_plugins_api_v3_gitbucket_plugins_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ApiPlugin"
                                    },
                                    "type": "array",
                                    "title": "Response List Plugins Api V3 Gitbucket Plugins Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/user": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get Authenticated User",
                "description": "Get the authenticated user.\n\nReturns:\n    User: The authenticated user",
                "operationId": "get_authenticated_user_api_v3_user_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "user"
                ],
                "summary": "Update User",
                "description": "Update the authenticated user.\n\nArgs:\n    user_data: The user data to update\n    current_user: The authenticated user\n\nReturns:\n    User: The updated user",
                "operationId": "update_user_api_v3_user_patch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/api/v3/users": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get Users",
                "description": "Get all users.\n\nReturns:\n    List[User]: List of all users",
                "operationId": "get_users_api_v3_users_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array",
                                    "title": "Response Get Users Api V3 Users Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/users/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get User",
                "description": "Get a specific user by username.\n\nArgs:\n    username: The username of the user to get\n\nReturns:\n    User: The requested user\n\nRaises:\n    HTTPException: If the user is not found",
                "operationId": "get_user_api_v3_users__username__get",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/admin/users": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create User",
                "description": "Create a new user (admin only).\n\nArgs:\n    user_data: The user data\n    current_user: The authenticated user\n\nReturns:\n    User: The created user\n\nRaises:\n    HTTPException: If the user is not an admin",
                "operationId": "create_user_api_v3_admin_users_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/api/v3/users/{username}/suspended": {
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Suspend User",
                "description": "Suspend a user (admin only).\n\nArgs:\n    username: The username of the user to suspend\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the user is not an admin or the user to suspend is not found",
                "operationId": "suspend_user_api_v3_users__username__suspended_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Unsuspend User",
                "description": "Unsuspend a user (admin only).\n\nArgs:\n    username: The username of the user to unsuspend\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the user is not an admin or the user to unsuspend is not found",
                "operationId": "unsuspend_user_api_v3_users__username__suspended_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/organizations": {
            "get": {
                "tags": [
                    "organization"
                ],
                "summary": "Get Organizations",
                "description": "List all organizations.\n\nThis endpoint returns a list of all organizations.\n\nReturns:\n    List[Organization]: List of all organizations",
                "operationId": "get_organizations_api_v3_organizations_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Organization"
                                    },
                                    "type": "array",
                                    "title": "Response Get Organizations Api V3 Organizations Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/orgs/{group_name}": {
            "get": {
                "tags": [
                    "organization"
                ],
                "summary": "Get Organization",
                "description": "Get a specific organization by name.\n\nArgs:\n    group_name: The name of the organization to get\n\nReturns:\n    Organization: The requested organization\n\nRaises:\n    HTTPException: If the organization is not found",
                "operationId": "get_organization_api_v3_orgs__group_name__get",
                "parameters": [
                    {
                        "name": "group_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Group Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/user/orgs": {
            "get": {
                "tags": [
                    "organization"
                ],
                "summary": "Get User Organizations",
                "description": "List organizations for the authenticated user.\n\nReturns:\n    List[Organization]: List of organizations for the authenticated user",
                "operationId": "get_user_organizations_api_v3_user_orgs_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Organization"
                                    },
                                    "type": "array",
                                    "title": "Response Get User Organizations Api V3 User Orgs Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/api/v3/users/{username}/orgs": {
            "get": {
                "tags": [
                    "organization"
                ],
                "summary": "Get User Organizations By Username",
                "description": "List organizations for a specific user.\n\nArgs:\n    username: The username of the user to get organizations for\n\nReturns:\n    List[Organization]: List of organizations for the specified user",
                "operationId": "get_user_organizations_by_username_api_v3_users__username__orgs_get",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Organization"
                                    },
                                    "title": "Response Get User Organizations By Username Api V3 Users  Username  Orgs Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/admin/organizations": {
            "post": {
                "tags": [
                    "organization"
                ],
                "summary": "Create Organization",
                "description": "Create a new organization.\n\nThis endpoint is only available to administrators.\n\nArgs:\n    organization: The organization to create\n    current_user: The authenticated user\n\nReturns:\n    Organization: The created organization\n\nRaises:\n    HTTPException: If the user is not an administrator",
                "operationId": "create_organization_api_v3_admin_organizations_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/api/v3/repositories": {
            "get": {
                "tags": [
                    "repository"
                ],
                "summary": "Get Repositories",
                "description": "List all public repositories.\n\nReturns:\n    List[Repository]: List of all public repositories",
                "operationId": "get_repositories_api_v3_repositories_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Repository"
                                    },
                                    "type": "array",
                                    "title": "Response Get Repositories Api V3 Repositories Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}": {
            "get": {
                "tags": [
                    "repository"
                ],
                "summary": "Get Repository",
                "description": "Get a specific repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    Repository: The requested repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_api_v3_repos__owner___repository__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/user/repos": {
            "get": {
                "tags": [
                    "repository"
                ],
                "summary": "Get User Repositories",
                "description": "List repositories for the authenticated user.\n\nReturns:\n    List[Repository]: List of repositories for the authenticated user",
                "operationId": "get_user_repositories_api_v3_user_repos_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Repository"
                                    },
                                    "type": "array",
                                    "title": "Response Get User Repositories Api V3 User Repos Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "repository"
                ],
                "summary": "Create User Repository",
                "description": "Create a new repository for the authenticated user.\n\nArgs:\n    repository: The repository to create\n    current_user: The authenticated user\n\nReturns:\n    Repository: The created repository\n\nRaises:\n    HTTPException: If the repository name is invalid or already exists",
                "operationId": "create_user_repository_api_v3_user_repos_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RepositoryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/api/v3/users/{username}/repos": {
            "get": {
                "tags": [
                    "repository"
                ],
                "summary": "Get User Repositories By Username",
                "description": "List repositories for a specific user.\n\nArgs:\n    username: The username of the user to get repositories for\n\nReturns:\n    List[Repository]: List of repositories for the specified user\n\nRaises:\n    HTTPException: If the user is not found",
                "operationId": "get_user_repositories_by_username_api_v3_users__username__repos_get",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Repository"
                                    },
                                    "title": "Response Get User Repositories By Username Api V3 Users  Username  Repos Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/orgs/{org_name}/repos": {
            "get": {
                "tags": [
                    "repository"
                ],
                "summary": "Get Organization Repositories",
                "description": "List repositories for a specific organization.\n\nArgs:\n    org_name: The name of the organization to get repositories for\n\nReturns:\n    List[Repository]: List of repositories for the specified organization\n\nRaises:\n    HTTPException: If the organization is not found",
                "operationId": "get_organization_repositories_api_v3_orgs__org_name__repos_get",
                "parameters": [
                    {
                        "name": "org_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Org Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Repository"
                                    },
                                    "title": "Response Get Organization Repositories Api V3 Orgs  Org Name  Repos Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/orgs/{org}/repos": {
            "post": {
                "tags": [
                    "repository"
                ],
                "summary": "Create Organization Repository",
                "description": "Create a new repository for an organization.\n\nArgs:\n    org: The organization to create the repository for\n    repository: The repository to create\n    current_user: The authenticated user\n\nReturns:\n    Repository: The created repository\n\nRaises:\n    HTTPException: If the repository name is invalid or already exists,\n                  or if the user is not a member of the organization",
                "operationId": "create_organization_repository_api_v3_orgs__org__repos_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "org",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Org"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RepositoryCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues": {
            "get": {
                "tags": [
                    "issue"
                ],
                "summary": "Get Repository Issues",
                "description": "List issues for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[Issue]: List of issues for the repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_issues_api_v3_repos__owner___repository__issues_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Issue"
                                    },
                                    "title": "Response Get Repository Issues Api V3 Repos  Owner   Repository  Issues Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "issue"
                ],
                "summary": "Create Repository Issue",
                "description": "Create a new issue in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue: The issue to create\n    current_user: The authenticated user\n\nRaises:\n    HTTPException: If the repository is not found or user lacks permission",
                "operationId": "create_repository_issue_api_v3_repos__owner___repository__issues_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Issue"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues/{issue_id}": {
            "get": {
                "tags": [
                    "issue"
                ],
                "summary": "Get Repository Issue",
                "description": "Get a specific issue from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n\nReturns:\n    Issue: The requested issue\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "get_repository_issue_api_v3_repos__owner___repository__issues__issue_id__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Issue"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues/{issue_id}/comments": {
            "get": {
                "tags": [
                    "issue_comment"
                ],
                "summary": "Get Issue Comments",
                "description": "List comments for an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n\nReturns:\n    List[Comment]: List of comments for the issue\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "get_issue_comments_api_v3_repos__owner___repository__issues__issue_id__comments_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    },
                                    "title": "Response Get Issue Comments Api V3 Repos  Owner   Repository  Issues  Issue Id  Comments Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "issue_comment"
                ],
                "summary": "Create Issue Comment",
                "description": "Create a new comment on an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n    comment: The comment to create\n    current_user: The authenticated user\n\nReturns:\n    Comment: The created comment\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "create_issue_comment_api_v3_repos__owner___repository__issues__issue_id__comments_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues/comments/{comment_id}": {
            "get": {
                "tags": [
                    "issue_comment"
                ],
                "summary": "Get Issue Comment",
                "description": "Get a specific comment.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    comment_id: The ID of the comment\n\nReturns:\n    Comment: The requested comment\n\nRaises:\n    HTTPException: If the repository or comment is not found",
                "operationId": "get_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "comment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Comment Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "issue_comment"
                ],
                "summary": "Update Issue Comment",
                "description": "Update a comment.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    comment_id: The ID of the comment\n    comment: The updated comment data\n    current_user: The authenticated user\n\nReturns:\n    Comment: The updated comment\n\nRaises:\n    HTTPException: If the repository or comment is not found,\n                  or if the user doesn't have permission",
                "operationId": "update_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "comment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Comment Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "issue_comment"
                ],
                "summary": "Delete Issue Comment",
                "description": "Delete a comment.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    comment_id: The ID of the comment\n    current_user: The authenticated user\n\nRaises:\n    HTTPException: If the repository or comment is not found,\n                  or if the user doesn't have permission",
                "operationId": "delete_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "comment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Comment Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/labels": {
            "get": {
                "tags": [
                    "label"
                ],
                "summary": "Get Repository Labels",
                "description": "List all labels for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[Label]: List of labels for the repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_labels_api_v3_repos__owner___repository__labels_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Label"
                                    },
                                    "title": "Response Get Repository Labels Api V3 Repos  Owner   Repository  Labels Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "label"
                ],
                "summary": "Create Repository Label",
                "description": "Create a new label in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    label: The label to create\n    current_user: The authenticated user\n\nReturns:\n    Label: The created label\n\nRaises:\n    HTTPException: If the repository is not found, the label is invalid,\n                  or a label with the same name already exists",
                "operationId": "create_repository_label_api_v3_repos__owner___repository__labels_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/labels/{label_name}": {
            "get": {
                "tags": [
                    "label"
                ],
                "summary": "Get Repository Label",
                "description": "Get a specific label from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    label_name: The name of the label\n\nReturns:\n    Label: The requested label\n\nRaises:\n    HTTPException: If the repository or label is not found",
                "operationId": "get_repository_label_api_v3_repos__owner___repository__labels__label_name__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "label_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Label Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "label"
                ],
                "summary": "Update Repository Label",
                "description": "Update a label in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    label_name: The name of the label to update\n    label: The updated label data\n    current_user: The authenticated user\n\nReturns:\n    Label: The updated label\n\nRaises:\n    HTTPException: If the repository or label is not found,\n                  or the label is invalid",
                "operationId": "update_repository_label_api_v3_repos__owner___repository__labels__label_name__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "label_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Label Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Label"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "label"
                ],
                "summary": "Delete Repository Label",
                "description": "Delete a label from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    label_name: The name of the label to delete\n    current_user: The authenticated user\n\nRaises:\n    HTTPException: If the repository or label is not found",
                "operationId": "delete_repository_label_api_v3_repos__owner___repository__labels__label_name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "label_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Label Name"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues/{issue_id}/labels": {
            "get": {
                "tags": [
                    "label"
                ],
                "summary": "Get Issue Labels",
                "description": "List labels for an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n\nReturns:\n    List[Label]: List of labels for the issue\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "get_issue_labels_api_v3_repos__owner___repository__issues__issue_id__labels_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Label"
                                    },
                                    "title": "Response Get Issue Labels Api V3 Repos  Owner   Repository  Issues  Issue Id  Labels Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "label"
                ],
                "summary": "Add Labels To Issue",
                "description": "Add labels to an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n    labels: The labels to add\n    current_user: The authenticated user\n\nReturns:\n    List[Label]: List of added labels\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "add_labels_to_issue_api_v3_repos__owner___repository__issues__issue_id__labels_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddLabelsToIssue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Label"
                                    },
                                    "title": "Response Add Labels To Issue Api V3 Repos  Owner   Repository  Issues  Issue Id  Labels Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "label"
                ],
                "summary": "Replace All Labels For Issue",
                "description": "Replace all labels for an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n    labels: The new labels\n    current_user: The authenticated user\n\nReturns:\n    List[Label]: List of new labels\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "replace_all_labels_for_issue_api_v3_repos__owner___repository__issues__issue_id__labels_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddLabelsToIssue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Label"
                                    },
                                    "title": "Response Replace All Labels For Issue Api V3 Repos  Owner   Repository  Issues  Issue Id  Labels Put"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "label"
                ],
                "summary": "Remove All Labels From Issue",
                "description": "Remove all labels from an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n    current_user: The authenticated user\n\nRaises:\n    HTTPException: If the repository or issue is not found",
                "operationId": "remove_all_labels_from_issue_api_v3_repos__owner___repository__issues__issue_id__labels_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/issues/{issue_id}/labels/{label_name}": {
            "delete": {
                "tags": [
                    "label"
                ],
                "summary": "Remove Label From Issue",
                "description": "Remove a label from an issue.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    issue_id: The ID of the issue\n    label_name: The name of the label to remove\n    current_user: The authenticated user\n\nReturns:\n    List[Label]: List of remaining labels\n\nRaises:\n    HTTPException: If the repository, issue, or label is not found",
                "operationId": "remove_label_from_issue_api_v3_repos__owner___repository__issues__issue_id__labels__label_name__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "issue_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Issue Id"
                        }
                    },
                    {
                        "name": "label_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Label Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Label"
                                    },
                                    "title": "Response Remove Label From Issue Api V3 Repos  Owner   Repository  Issues  Issue Id  Labels  Label Name  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/milestones": {
            "get": {
                "tags": [
                    "milestone"
                ],
                "summary": "Get Repository Milestones",
                "description": "List milestones for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    state: Filter milestones by state: all, open, or closed\n\nReturns:\n    List[Milestone]: List of milestones for the repository\n\nRaises:\n    HTTPException: If the repository is not found or state is invalid",
                "operationId": "get_repository_milestones_api_v3_repos__owner___repository__milestones_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter milestones by state: all, open, or closed",
                            "default": "all",
                            "title": "State"
                        },
                        "description": "Filter milestones by state: all, open, or closed"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Milestone"
                                    },
                                    "title": "Response Get Repository Milestones Api V3 Repos  Owner   Repository  Milestones Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "milestone"
                ],
                "summary": "Create Repository Milestone",
                "description": "Create a new milestone in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    milestone: The milestone to create\n    current_user: The authenticated user\n\nReturns:\n    Milestone: The created milestone\n\nRaises:\n    HTTPException: If the repository is not found or the milestone is invalid",
                "operationId": "create_repository_milestone_api_v3_repos__owner___repository__milestones_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MilestoneCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Milestone"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/milestones/{milestone_number}": {
            "get": {
                "tags": [
                    "milestone"
                ],
                "summary": "Get Repository Milestone",
                "description": "Get a specific milestone from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    milestone_number: The number of the milestone\n\nReturns:\n    Milestone: The requested milestone\n\nRaises:\n    HTTPException: If the repository or milestone is not found",
                "operationId": "get_repository_milestone_api_v3_repos__owner___repository__milestones__milestone_number__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Milestone Number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Milestone"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "milestone"
                ],
                "summary": "Update Repository Milestone",
                "description": "Update a milestone in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    milestone_number: The number of the milestone to update\n    milestone: The updated milestone data\n    current_user: The authenticated user\n\nReturns:\n    Milestone: The updated milestone\n\nRaises:\n    HTTPException: If the repository or milestone is not found,\n                  or the milestone is invalid",
                "operationId": "update_repository_milestone_api_v3_repos__owner___repository__milestones__milestone_number__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Milestone Number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MilestoneCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Milestone"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "milestone"
                ],
                "summary": "Delete Repository Milestone",
                "description": "Delete a milestone from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    milestone_number: The number of the milestone to delete\n    current_user: The authenticated user\n\nRaises:\n    HTTPException: If the repository or milestone is not found",
                "operationId": "delete_repository_milestone_api_v3_repos__owner___repository__milestones__milestone_number__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "milestone_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Milestone Number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/pulls": {
            "get": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Get Repository Pull Requests",
                "description": "List pull requests for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    state: Filter pull requests by state: open, closed, or all\n\nReturns:\n    List[PullRequest]: List of pull requests for the repository\n\nRaises:\n    HTTPException: If the repository is not found or state is invalid",
                "operationId": "get_repository_pull_requests_api_v3_repos__owner___repository__pulls_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Filter pull requests by state: open, closed, or all",
                            "default": "open",
                            "title": "State"
                        },
                        "description": "Filter pull requests by state: open, closed, or all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PullRequest"
                                    },
                                    "title": "Response Get Repository Pull Requests Api V3 Repos  Owner   Repository  Pulls Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Create Repository Pull Request",
                "description": "Create a new pull request in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_request_data: The pull request data\n    current_user: The authenticated user\n\nReturns:\n    PullRequest: The created pull request\n\nRaises:\n    HTTPException: If the repository is not found or the data is invalid",
                "operationId": "create_repository_pull_request_api_v3_repos__owner___repository__pulls_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/PullRequestCreate"
                                    },
                                    {
                                        "$ref": "#/components/schemas/PullRequestCreateAlt"
                                    }
                                ],
                                "title": "Pull Request Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PullRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/pulls/{pull_number}": {
            "get": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Get Repository Pull Request",
                "description": "Get a specific pull request from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_number: The number of the pull request\n\nReturns:\n    PullRequest: The requested pull request\n\nRaises:\n    HTTPException: If the repository or pull request is not found",
                "operationId": "get_repository_pull_request_api_v3_repos__owner___repository__pulls__pull_number__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "pull_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The number of the pull request",
                            "title": "Pull Number"
                        },
                        "description": "The number of the pull request"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PullRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Update Repository Pull Request",
                "description": "Update a pull request in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_number: The number of the pull request to update\n    pull_request_data: The updated pull request data\n    current_user: The authenticated user\n\nReturns:\n    PullRequest: The updated pull request\n\nRaises:\n    HTTPException: If the repository or pull request is not found",
                "operationId": "update_repository_pull_request_api_v3_repos__owner___repository__pulls__pull_number__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "pull_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Pull Number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PullRequestUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PullRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/pulls/{pull_number}/commits": {
            "get": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Get Repository Pull Request Commits",
                "description": "List commits on a pull request.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_number: The number of the pull request\n\nReturns:\n    List[dict]: List of commits for the pull request\n\nRaises:\n    HTTPException: If the repository or pull request is not found",
                "operationId": "get_repository_pull_request_commits_api_v3_repos__owner___repository__pulls__pull_number__commits_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "pull_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Pull Number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/pulls/{pull_number}/merge": {
            "get": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Check If Pull Request Has Been Merged",
                "description": "Check if a pull request has been merged.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_number: The number of the pull request\n\nReturns:\n    204 No Content if merged, 404 Not Found if not merged\n\nRaises:\n    HTTPException: If the repository or pull request is not found",
                "operationId": "check_if_pull_request_has_been_merged_api_v3_repos__owner___repository__pulls__pull_number__merge_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "pull_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Pull Number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "pull_request"
                ],
                "summary": "Merge Pull Request",
                "description": "Merge a pull request.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    pull_number: The number of the pull request\n    merge_data: The merge data\n    current_user: The authenticated user\n\nReturns:\n    MergePullRequestSuccess or MergePullRequestFailure\n\nRaises:\n    HTTPException: If the repository or pull request is not found",
                "operationId": "merge_pull_request_api_v3_repos__owner___repository__pulls__pull_number__merge_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "pull_number",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Pull Number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MergePullRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/collaborators": {
            "get": {
                "tags": [
                    "collaborator"
                ],
                "summary": "Get Repository Collaborators",
                "description": "List collaborators for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[User]: List of collaborators for the repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_collaborators_api_v3_repos__owner___repository__collaborators_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "title": "Response Get Repository Collaborators Api V3 Repos  Owner   Repository  Collaborators Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/collaborators/{username}": {
            "get": {
                "tags": [
                    "collaborator"
                ],
                "summary": "Check If User Is Collaborator",
                "description": "Check if a user is a collaborator on a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    username: The username to check\n\nReturns:\n    204 No Content if the user is a collaborator, 404 Not Found otherwise\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "check_if_user_is_collaborator_api_v3_repos__owner___repository__collaborators__username__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The username of the collaborator to check",
                            "title": "Username"
                        },
                        "description": "The username of the collaborator to check"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "collaborator"
                ],
                "summary": "Add Repository Collaborator",
                "description": "Add a collaborator to a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    username: The username of the collaborator to add\n    collaborator_data: The collaborator data with permission\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or user is not found, or if the current user is not the owner",
                "operationId": "add_repository_collaborator_api_v3_repos__owner___repository__collaborators__username__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The username of the collaborator to add",
                            "title": "Username"
                        },
                        "description": "The username of the collaborator to add"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddCollaborator"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "collaborator"
                ],
                "summary": "Remove Repository Collaborator",
                "description": "Remove a collaborator from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    username: The username of the collaborator to remove\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or user is not found, or if the current user is not the owner",
                "operationId": "remove_repository_collaborator_api_v3_repos__owner___repository__collaborators__username__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The username of the collaborator to remove",
                            "title": "Username"
                        },
                        "description": "The username of the collaborator to remove"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/collaborators/{username}/permission": {
            "get": {
                "tags": [
                    "collaborator"
                ],
                "summary": "Get Repository Permissions For User",
                "description": "Get repository permissions for a user.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    username: The username of the collaborator\n\nReturns:\n    RepositoryCollaborator: The collaborator with permission information\n\nRaises:\n    HTTPException: If the repository or user is not found, or if the user is not a collaborator",
                "operationId": "get_repository_permissions_for_user_api_v3_repos__owner___repository__collaborators__username__permission_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The username of the collaborator",
                            "title": "Username"
                        },
                        "description": "The username of the collaborator"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RepositoryCollaborator"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/commits": {
            "get": {
                "tags": [
                    "commit"
                ],
                "summary": "Get Repository Commits",
                "description": "List commits on a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    sha: SHA or branch to start listing commits from\n    path: Only commits containing this file path will be returned\n    author: GitHub login or email address by which to filter by commit author\n    since: Only commits after this date will be returned (ISO 8601 format)\n    until: Only commits before this date will be returned (ISO 8601 format)\n    page: Page number of the results to fetch\n    per_page: Number of items to return per page\n\nReturns:\n    List[Commit]: List of commits for the repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_commits_api_v3_repos__owner___repository__commits_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "SHA or branch to start listing commits from",
                            "title": "Sha"
                        },
                        "description": "SHA or branch to start listing commits from"
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Only commits containing this file path will be returned",
                            "title": "Path"
                        },
                        "description": "Only commits containing this file path will be returned"
                    },
                    {
                        "name": "author",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "GitHub login or email address by which to filter by commit author",
                            "title": "Author"
                        },
                        "description": "GitHub login or email address by which to filter by commit author"
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Only commits after this date will be returned",
                            "title": "Since"
                        },
                        "description": "Only commits after this date will be returned"
                    },
                    {
                        "name": "until",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Only commits before this date will be returned",
                            "title": "Until"
                        },
                        "description": "Only commits before this date will be returned"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "Page number of the results to fetch",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "Page number of the results to fetch"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "description": "Number of items to return per page",
                            "default": 30,
                            "title": "Per Page"
                        },
                        "description": "Number of items to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Commit"
                                    },
                                    "title": "Response Get Repository Commits Api V3 Repos  Owner   Repository  Commits Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/commits/{sha}": {
            "get": {
                "tags": [
                    "commit"
                ],
                "summary": "Get Repository Commit",
                "description": "Get a single commit.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    sha: The SHA of the commit\n\nReturns:\n    Commit: The requested commit\n\nRaises:\n    HTTPException: If the repository or commit is not found",
                "operationId": "get_repository_commit_api_v3_repos__owner___repository__commits__sha__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Sha"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Commit"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/commits/{sha}/branches-where-head": {
            "get": {
                "tags": [
                    "commit"
                ],
                "summary": "Get Branches For Head Commit",
                "description": "List branches for HEAD commit.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    sha: The SHA of the commit\n\nReturns:\n    List[BranchForHeadCommit]: List of branches where the commit is the HEAD\n\nRaises:\n    HTTPException: If the repository or commit is not found",
                "operationId": "get_branches_for_head_commit_api_v3_repos__owner___repository__commits__sha__branches_where_head_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Sha"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchForHeadCommit"
                                    },
                                    "title": "Response Get Branches For Head Commit Api V3 Repos  Owner   Repository  Commits  Sha  Branches Where Head Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/branches": {
            "get": {
                "tags": [
                    "branch"
                ],
                "summary": "Get Repository Branches",
                "description": "List branches for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[BranchForList]: List of branches for the repository\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_repository_branches_api_v3_repos__owner___repository__branches_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchForList"
                                    },
                                    "title": "Response Get Repository Branches Api V3 Repos  Owner   Repository  Branches Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/branches/{branch}": {
            "get": {
                "tags": [
                    "branch"
                ],
                "summary": "Get Repository Branch",
                "description": "Get a specific branch from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n\nReturns:\n    Branch: The requested branch\n\nRaises:\n    HTTPException: If the repository or branch is not found",
                "operationId": "get_repository_branch_api_v3_repos__owner___repository__branches__branch__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Branch"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "branch"
                ],
                "summary": "Update Branch Protection",
                "description": "Update branch protection for a specific branch.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n    protection_data: The branch protection settings\n    current_user: The authenticated user\n\nReturns:\n    Branch: The updated branch\n\nRaises:\n    HTTPException: If the repository or branch is not found,\n                  or if the user is not the owner",
                "operationId": "update_branch_protection_api_v3_repos__owner___repository__branches__branch__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchProtectionEnablingAndDisabling"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Branch"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection": {
            "get": {
                "tags": [
                    "branch"
                ],
                "summary": "Get Branch Protection",
                "description": "Get branch protection for a specific branch.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n\nReturns:\n    BranchProtection: The branch protection settings\n\nRaises:\n    HTTPException: If the repository or branch is not found",
                "operationId": "get_branch_protection_api_v3_repos__owner___repository__branches__branch__protection_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchProtection"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "branch"
                ],
                "summary": "Delete Branch Protection",
                "description": "Delete branch protection for a specific branch.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or branch is not found,\n                  or if the user is not the owner,\n                  or if branch protection is not enabled",
                "operationId": "delete_branch_protection_api_v3_repos__owner___repository__branches__branch__protection_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection/required_status_checks": {
            "get": {
                "tags": [
                    "branch"
                ],
                "summary": "Get Status Checks Protection",
                "description": "Get status checks protection for a specific branch.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n\nReturns:\n    BranchProtectionStatus: The status checks protection settings\n\nRaises:\n    HTTPException: If the repository or branch is not found",
                "operationId": "get_status_checks_protection_api_v3_repos__owner___repository__branches__branch__protection_required_status_checks_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchProtectionStatus"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection/required_status_checks/contexts": {
            "get": {
                "tags": [
                    "branch"
                ],
                "summary": "Get Status Check Contexts",
                "description": "Get status check contexts for a specific branch.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    branch: The name of the branch\n\nReturns:\n    List[str]: The status check contexts\n\nRaises:\n    HTTPException: If the repository or branch is not found,\n                  or if branch protection is not enabled",
                "operationId": "get_status_check_contexts_api_v3_repos__owner___repository__branches__branch__protection_required_status_checks_contexts_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the branch",
                            "title": "Branch"
                        },
                        "description": "The name of the branch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response Get Status Check Contexts Api V3 Repos  Owner   Repository  Branches  Branch  Protection Required Status Checks Contexts Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/readme": {
            "get": {
                "tags": [
                    "content"
                ],
                "summary": "Get Repository Readme",
                "description": "Get the README file from a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref: The name of the commit/branch/tag. Default: the repository's default branch\n    accept: Media type to specify the format of the response\n\nReturns:\n    Content: The README file content\n\nRaises:\n    HTTPException: If the repository or README file is not found",
                "operationId": "get_repository_readme_api_v3_repos__owner___repository__readme_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the commit/branch/tag",
                            "title": "Ref"
                        },
                        "description": "The name of the commit/branch/tag"
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Media type to specify the format of the response",
                            "title": "Accept"
                        },
                        "description": "Media type to specify the format of the response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/contents": {
            "get": {
                "tags": [
                    "content"
                ],
                "summary": "Get Repository Contents",
                "description": "Get the contents of a file or directory in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    path: Path to the content. Default: repository root\n    ref: The name of the commit/branch/tag. Default: the repository's default branch\n    accept: Media type to specify the format of the response\n\nReturns:\n    Union[List[Content], Content]: The contents of the file or directory\n\nRaises:\n    HTTPException: If the repository or content is not found",
                "operationId": "get_repository_contents_api_v3_repos__owner___repository__contents_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Path to the content",
                            "default": "",
                            "title": "Path"
                        },
                        "description": "Path to the content"
                    },
                    {
                        "name": "ref",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the commit/branch/tag",
                            "title": "Ref"
                        },
                        "description": "The name of the commit/branch/tag"
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Media type to specify the format of the response",
                            "title": "Accept"
                        },
                        "description": "Media type to specify the format of the response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Content"
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/Content"
                                        }
                                    ],
                                    "title": "Response Get Repository Contents Api V3 Repos  Owner   Repository  Contents Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/contents/{path}": {
            "get": {
                "tags": [
                    "content"
                ],
                "summary": "Get Repository Content By Path",
                "description": "Get the contents of a file or directory in a repository by path.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    path: Path to the content\n    ref: The name of the commit/branch/tag. Default: the repository's default branch\n    accept: Media type to specify the format of the response\n\nReturns:\n    Union[List[Content], Content]: The contents of the file or directory\n\nRaises:\n    HTTPException: If the repository or content is not found",
                "operationId": "get_repository_content_by_path_api_v3_repos__owner___repository__contents__path__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Path to the content",
                            "title": "Path"
                        },
                        "description": "Path to the content"
                    },
                    {
                        "name": "ref",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the commit/branch/tag",
                            "title": "Ref"
                        },
                        "description": "The name of the commit/branch/tag"
                    },
                    {
                        "name": "accept",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Media type to specify the format of the response",
                            "title": "Accept"
                        },
                        "description": "Media type to specify the format of the response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Content"
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/Content"
                                        }
                                    ],
                                    "title": "Response Get Repository Content By Path Api V3 Repos  Owner   Repository  Contents  Path  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "content"
                ],
                "summary": "Create Or Update File",
                "description": "Create or update a file in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    path: Path to the content\n    file_data: The file data to create or update\n    current_user: The authenticated user\n\nReturns:\n    dict: The created or updated file information\n\nRaises:\n    HTTPException: If the repository is not found or the user doesn't have permission",
                "operationId": "create_or_update_file_api_v3_repos__owner___repository__contents__path__put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Path to the content",
                            "title": "Path"
                        },
                        "description": "Path to the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFile"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true,
                                    "title": "Response Create Or Update File Api V3 Repos  Owner   Repository  Contents  Path  Put"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/raw/{path}": {
            "get": {
                "tags": [
                    "content"
                ],
                "summary": "Get Raw File",
                "description": "Get the raw content of a file in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    path: Path to the file\n    ref: The name of the commit/branch/tag. Default: the repository's default branch\n\nReturns:\n    Response: The raw content of the file\n\nRaises:\n    HTTPException: If the repository or file is not found",
                "operationId": "get_raw_file_api_v3_repos__owner___repository__raw__path__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Path to the file",
                            "title": "Path"
                        },
                        "description": "Path to the file"
                    },
                    {
                        "name": "ref",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The name of the commit/branch/tag",
                            "title": "Ref"
                        },
                        "description": "The name of the commit/branch/tag"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/git/refs": {
            "get": {
                "tags": [
                    "git"
                ],
                "summary": "Get Git Refs",
                "description": "List all references in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[GitRef]: List of Git references\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_git_refs_api_v3_repos__owner___repository__git_refs_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GitRef"
                                    },
                                    "title": "Response Get Git Refs Api V3 Repos  Owner   Repository  Git Refs Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "git"
                ],
                "summary": "Create Git Ref",
                "description": "Create a reference.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref_data: The reference data\n    current_user: The authenticated user\n\nReturns:\n    GitRef: The created Git reference\n\nRaises:\n    HTTPException: If the repository is not found, the user doesn't have permission,\n                  or the reference already exists",
                "operationId": "create_git_ref_api_v3_repos__owner___repository__git_refs_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGitRef"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GitRef"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/git/refs/{ref_path}": {
            "get": {
                "tags": [
                    "git"
                ],
                "summary": "Get Matching Refs",
                "description": "List matching references in a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref_path: The reference path (e.g., 'heads', 'tags', 'heads/feature')\n\nReturns:\n    List[GitRef]: List of matching Git references\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_matching_refs_api_v3_repos__owner___repository__git_refs__ref_path__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The reference path",
                            "title": "Ref Path"
                        },
                        "description": "The reference path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GitRef"
                                    },
                                    "title": "Response Get Matching Refs Api V3 Repos  Owner   Repository  Git Refs  Ref Path  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "git"
                ],
                "summary": "Update Git Ref",
                "description": "Update a reference.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref_path: The reference path (e.g., 'heads/main', 'tags/v1.0')\n    ref_data: The reference data\n    current_user: The authenticated user\n\nReturns:\n    GitRef: The updated Git reference\n\nRaises:\n    HTTPException: If the repository or reference is not found, or the user doesn't have permission",
                "operationId": "update_git_ref_api_v3_repos__owner___repository__git_refs__ref_path__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The reference path",
                            "title": "Ref Path"
                        },
                        "description": "The reference path"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGitRef"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GitRef"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "git"
                ],
                "summary": "Delete Git Ref",
                "description": "Delete a reference.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref_path: The reference path (e.g., 'heads/feature', 'tags/v1.0')\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or reference is not found, or the user doesn't have permission",
                "operationId": "delete_git_ref_api_v3_repos__owner___repository__git_refs__ref_path__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The reference path",
                            "title": "Ref Path"
                        },
                        "description": "The reference path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/git/ref/{ref_path}": {
            "get": {
                "tags": [
                    "git"
                ],
                "summary": "Get Git Ref",
                "description": "Get a single reference.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref_path: The reference path (e.g., 'heads/main', 'tags/v1.0')\n\nReturns:\n    GitRef: The Git reference\n\nRaises:\n    HTTPException: If the repository or reference is not found",
                "operationId": "get_git_ref_api_v3_repos__owner___repository__git_ref__ref_path__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The reference path",
                            "title": "Ref Path"
                        },
                        "description": "The reference path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GitRef"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases": {
            "get": {
                "tags": [
                    "release"
                ],
                "summary": "Get Releases",
                "description": "List releases for a repository.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[Release]: List of releases\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_releases_api_v3_repos__owner___repository__releases_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Release"
                                    },
                                    "title": "Response Get Releases Api V3 Repos  Owner   Repository  Releases Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "release"
                ],
                "summary": "Create Release",
                "description": "Create a release.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    release_data: The release data\n    current_user: The authenticated user\n\nReturns:\n    Release: The created release\n\nRaises:\n    HTTPException: If the repository is not found or the user doesn't have permission",
                "operationId": "create_release_api_v3_repos__owner___repository__releases_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRelease"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases/latest": {
            "get": {
                "tags": [
                    "release"
                ],
                "summary": "Get Latest Release",
                "description": "Get the latest release.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    Release: The latest release\n\nRaises:\n    HTTPException: If the repository or release is not found",
                "operationId": "get_latest_release_api_v3_repos__owner___repository__releases_latest_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases/tags/{tag}": {
            "get": {
                "tags": [
                    "release"
                ],
                "summary": "Get Release By Tag",
                "description": "Get a release by tag name.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    tag: The tag name\n\nReturns:\n    Release: The release\n\nRaises:\n    HTTPException: If the repository or release is not found",
                "operationId": "get_release_by_tag_api_v3_repos__owner___repository__releases_tags__tag__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases/{tag}": {
            "patch": {
                "tags": [
                    "release"
                ],
                "summary": "Update Release",
                "description": "Update a release.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    tag: The tag name\n    release_data: The release data\n    current_user: The authenticated user\n\nReturns:\n    Release: The updated release\n\nRaises:\n    HTTPException: If the repository or release is not found, or the user doesn't have permission",
                "operationId": "update_release_api_v3_repos__owner___repository__releases__tag__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Tag"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRelease"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Release"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "release"
                ],
                "summary": "Delete Release",
                "description": "Delete a release.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    tag: The tag name\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or release is not found, or the user doesn't have permission",
                "operationId": "delete_release_api_v3_repos__owner___repository__releases__tag__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Tag"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases/{tag}/assets": {
            "post": {
                "tags": [
                    "release"
                ],
                "summary": "Upload Release Asset",
                "description": "Upload a release asset.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    tag: The tag name\n    name: The name of the asset\n    file: The file to upload\n    current_user: The authenticated user\n\nReturns:\n    ReleaseAsset: The created asset\n\nRaises:\n    HTTPException: If the repository or release is not found, or the user doesn't have permission",
                "operationId": "upload_release_asset_api_v3_repos__owner___repository__releases__tag__assets_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The name of the asset",
                            "title": "Name"
                        },
                        "description": "The name of the asset"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_release_asset_api_v3_repos__owner___repository__releases__tag__assets_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReleaseAsset"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/releases/{tag}/assets/{file_id}": {
            "get": {
                "tags": [
                    "release"
                ],
                "summary": "Get Release Asset",
                "description": "Get a release asset.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    tag: The tag name\n    file_id: The file ID\n\nReturns:\n    ReleaseAsset: The asset\n\nRaises:\n    HTTPException: If the repository, release, or asset is not found",
                "operationId": "get_release_asset_api_v3_repos__owner___repository__releases__tag__assets__file_id__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Tag"
                        }
                    },
                    {
                        "name": "file_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "File Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReleaseAsset"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/hooks": {
            "get": {
                "tags": [
                    "webhook"
                ],
                "summary": "Get Webhooks",
                "description": "List repository webhooks.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n\nReturns:\n    List[Webhook]: List of webhooks\n\nRaises:\n    HTTPException: If the repository is not found",
                "operationId": "get_webhooks_api_v3_repos__owner___repository__hooks_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Webhook"
                                    },
                                    "title": "Response Get Webhooks Api V3 Repos  Owner   Repository  Hooks Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "webhook"
                ],
                "summary": "Create Webhook",
                "description": "Create a repository webhook.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    webhook_data: The webhook data\n    current_user: The authenticated user\n\nReturns:\n    Webhook: The created webhook\n\nRaises:\n    HTTPException: If the repository is not found or the user doesn't have permission",
                "operationId": "create_webhook_api_v3_repos__owner___repository__hooks_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWebhook"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/hooks/{id}": {
            "get": {
                "tags": [
                    "webhook"
                ],
                "summary": "Get Webhook",
                "description": "Get a repository webhook.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    id: The ID of the webhook\n\nReturns:\n    Webhook: The webhook\n\nRaises:\n    HTTPException: If the repository or webhook is not found",
                "operationId": "get_webhook_api_v3_repos__owner___repository__hooks__id__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the webhook",
                            "title": "Id"
                        },
                        "description": "The ID of the webhook"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "webhook"
                ],
                "summary": "Update Webhook",
                "description": "Update a repository webhook.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    id: The ID of the webhook\n    webhook_data: The webhook data\n    current_user: The authenticated user\n\nReturns:\n    Webhook: The updated webhook\n\nRaises:\n    HTTPException: If the repository or webhook is not found, or the user doesn't have permission",
                "operationId": "update_webhook_api_v3_repos__owner___repository__hooks__id__patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the webhook",
                            "title": "Id"
                        },
                        "description": "The ID of the webhook"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateWebhook"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "webhook"
                ],
                "summary": "Delete Webhook",
                "description": "Delete a repository webhook.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    id: The ID of the webhook\n    current_user: The authenticated user\n\nReturns:\n    204 No Content\n\nRaises:\n    HTTPException: If the repository or webhook is not found, or the user doesn't have permission",
                "operationId": "delete_webhook_api_v3_repos__owner___repository__hooks__id__delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "description": "The ID of the webhook",
                            "title": "Id"
                        },
                        "description": "The ID of the webhook"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/commits/{ref}/status": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Get Combined Commit Status",
                "description": "Get the combined status for a specific ref.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref: The ref (SHA, branch name, or tag name) to get the status for\n\nReturns:\n    CombinedCommitStatus: The combined status\n\nRaises:\n    HTTPException: If the repository or ref is not found",
                "operationId": "get_combined_commit_status_api_v3_repos__owner___repository__commits__ref__status_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ref"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CombinedCommitStatus"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/commits/{ref}/statuses": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Get Commit Statuses",
                "description": "List statuses for a specific ref.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref: The ref (SHA, branch name, or tag name) to get the statuses for\n\nReturns:\n    List[CommitStatus]: List of statuses\n\nRaises:\n    HTTPException: If the repository or ref is not found",
                "operationId": "get_commit_statuses_api_v3_repos__owner___repository__commits__ref__statuses_get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ref"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommitStatus"
                                    },
                                    "title": "Response Get Commit Statuses Api V3 Repos  Owner   Repository  Commits  Ref  Statuses Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/statuses/{ref}": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Get Commit Statuses Legacy",
                "description": "List statuses for a specific ref (legacy route).\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    ref: The ref (SHA, branch name, or tag name) to get the statuses for\n\nReturns:\n    List[CommitStatus]: List of statuses\n\nRaises:\n    HTTPException: If the repository or ref is not found",
                "operationId": "get_commit_statuses_legacy_api_v3_repos__owner___repository__statuses__ref__get",
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "ref",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ref"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommitStatus"
                                    },
                                    "title": "Response Get Commit Statuses Legacy Api V3 Repos  Owner   Repository  Statuses  Ref  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/repos/{owner}/{repository}/statuses/{sha}": {
            "post": {
                "tags": [
                    "status"
                ],
                "summary": "Create Commit Status",
                "description": "Create a commit status.\n\nArgs:\n    owner: The owner of the repository\n    repository: The name of the repository\n    sha: The SHA of the commit to create a status for\n    status_data: The status data\n    current_user: The authenticated user\n\nReturns:\n    CommitStatus: The created status\n\nRaises:\n    HTTPException: If the repository is not found or the user doesn't have permission",
                "operationId": "create_commit_status_api_v3_repos__owner___repository__statuses__sha__post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Owner"
                        }
                    },
                    {
                        "name": "repository",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Repository"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Sha"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommitStatus"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v3/{path}": {
            "get": {
                "summary": "Not Implemented Get",
                "description": "Catch-all route for non-implemented GET API endpoints.\n\nReturns:\n    JSONResponse: 404 Not Found response",
                "operationId": "not_implemented_api_v3__path__get",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Path"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Not Implemented Post",
                "description": "Catch-all route for non-implemented POST API endpoints.\n\nReturns:\n    JSONResponse: 404 Not Found response",
                "operationId": "not_implemented_api_v3__path__post",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Path"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Not Implemented Put",
                "description": "Catch-all route for non-implemented PUT API endpoints.\n\nReturns:\n    JSONResponse: 404 Not Found response",
                "operationId": "not_implemented_api_v3__path__put",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Path"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Not Implemented Delete",
                "description": "Catch-all route for non-implemented DELETE API endpoints.\n\nReturns:\n    JSONResponse: 404 Not Found response",
                "operationId": "not_implemented_api_v3__path__delete",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Path"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Not Implemented Patch",
                "description": "Catch-all route for non-implemented PATCH API endpoints.\n\nReturns:\n    JSONResponse: 404 Not Found response",
                "operationId": "not_implemented_api_v3__path__patch",
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Path"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddCollaborator": {
                "properties": {
                    "permission": {
                        "title": "Permission",
                        "default": "push",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "AddCollaborator",
                "description": "Add collaborator model."
            },
            "AddLabelsToIssue": {
                "properties": {
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Labels"
                    }
                },
                "type": "object",
                "required": [
                    "labels"
                ],
                "title": "AddLabelsToIssue",
                "description": "Add labels to an issue model."
            },
            "ApiEndPoint": {
                "properties": {
                    "current_user_url": {
                        "type": "string",
                        "title": "Current User Url",
                        "default": "http://localhost:8080/api/v3/user"
                    },
                    "user_url": {
                        "type": "string",
                        "title": "User Url",
                        "default": "http://localhost:8080/api/v3/users/{user}"
                    },
                    "user_organizations_url": {
                        "type": "string",
                        "title": "User Organizations Url",
                        "default": "http://localhost:8080/api/v3/user/orgs"
                    },
                    "user_repositories_url": {
                        "type": "string",
                        "title": "User Repositories Url",
                        "default": "http://localhost:8080/api/v3/user/repos"
                    },
                    "repository_url": {
                        "type": "string",
                        "title": "Repository Url",
                        "default": "http://localhost:8080/api/v3/repos/{owner}/{repo}"
                    },
                    "issues_url": {
                        "type": "string",
                        "title": "Issues Url",
                        "default": "http://localhost:8080/api/v3/repos/{owner}/{repo}/issues"
                    }
                },
                "type": "object",
                "title": "ApiEndPoint",
                "description": "Root API endpoint response model."
            },
            "ApiPlugin": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "version": {
                        "type": "string",
                        "title": "Version"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "developer": {
                        "type": "string",
                        "title": "Developer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "version",
                    "description",
                    "developer"
                ],
                "title": "ApiPlugin",
                "description": "Plugin information model."
            },
            "Body_upload_release_asset_api_v3_repos__owner___repository__releases__tag__assets_post": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_upload_release_asset_api_v3_repos__owner___repository__releases__tag__assets_post"
            },
            "Branch": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "commit": {
                        "$ref": "#/components/schemas/BranchCommit"
                    },
                    "protection": {
                        "$ref": "#/components/schemas/BranchProtection"
                    },
                    "links": {
                        "additionalProperties": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        "type": "object",
                        "title": "Links"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "commit",
                    "protection"
                ],
                "title": "Branch",
                "description": "Branch model."
            },
            "BranchCommit": {
                "properties": {
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    }
                },
                "type": "object",
                "required": [
                    "sha"
                ],
                "title": "BranchCommit",
                "description": "Branch commit model."
            },
            "BranchForHeadCommit": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "commit": {
                        "$ref": "#/components/schemas/BranchCommit"
                    },
                    "protected": {
                        "type": "boolean",
                        "title": "Protected"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "commit",
                    "protected"
                ],
                "title": "BranchForHeadCommit",
                "description": "Branch for head commit model."
            },
            "BranchForList": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "commit": {
                        "$ref": "#/components/schemas/BranchCommit"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "commit"
                ],
                "title": "BranchForList",
                "description": "Branch for list model."
            },
            "BranchProtection": {
                "properties": {
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "title": "Enabled",
                        "default": false
                    },
                    "required_status_checks": {
                        "$ref": "#/components/schemas/BranchProtectionStatus",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "BranchProtection",
                "description": "Branch protection model."
            },
            "BranchProtectionEnablingAndDisabling": {
                "properties": {
                    "protection": {
                        "$ref": "#/components/schemas/BranchProtection"
                    }
                },
                "type": "object",
                "required": [
                    "protection"
                ],
                "title": "BranchProtectionEnablingAndDisabling",
                "description": "Branch protection enabling and disabling model."
            },
            "BranchProtectionStatus": {
                "properties": {
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    },
                    "enforcement_level": {
                        "type": "string",
                        "title": "Enforcement Level"
                    },
                    "contexts": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Contexts",
                        "default": []
                    },
                    "contexts_url": {
                        "title": "Contexts Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "enforcement_level"
                ],
                "title": "BranchProtectionStatus",
                "description": "Branch protection status model."
            },
            "CombinedCommitStatus": {
                "properties": {
                    "state": {
                        "type": "string",
                        "title": "State"
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    },
                    "total_count": {
                        "type": "integer",
                        "title": "Total Count"
                    },
                    "statuses": {
                        "items": {
                            "$ref": "#/components/schemas/CommitStatus"
                        },
                        "type": "array",
                        "title": "Statuses"
                    },
                    "repository": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Repository"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    }
                },
                "type": "object",
                "required": [
                    "state",
                    "sha",
                    "total_count",
                    "statuses",
                    "repository",
                    "url"
                ],
                "title": "CombinedCommitStatus",
                "description": "Combined commit status model."
            },
            "Comment": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "user": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "User"
                    },
                    "body": {
                        "type": "string",
                        "title": "Body"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "title": "Updated At"
                    },
                    "html_url": {
                        "title": "Html Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user",
                    "body",
                    "created_at",
                    "updated_at"
                ],
                "title": "Comment",
                "description": "Comment model."
            },
            "CommentCreate": {
                "properties": {
                    "body": {
                        "type": "string",
                        "title": "Body"
                    }
                },
                "type": "object",
                "required": [
                    "body"
                ],
                "title": "CommentCreate",
                "description": "Comment creation model."
            },
            "Commit": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    },
                    "html_url": {
                        "type": "string",
                        "title": "Html Url"
                    },
                    "comment_url": {
                        "type": "string",
                        "title": "Comment Url"
                    },
                    "commit": {
                        "$ref": "#/components/schemas/CommitDetail"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "committer": {
                        "$ref": "#/components/schemas/User"
                    },
                    "parents": {
                        "items": {
                            "$ref": "#/components/schemas/CommitTree"
                        },
                        "type": "array",
                        "title": "Parents"
                    },
                    "stats": {
                        "$ref": "#/components/schemas/CommitStats"
                    },
                    "files": {
                        "items": {
                            "$ref": "#/components/schemas/CommitFile"
                        },
                        "type": "array",
                        "title": "Files"
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "sha",
                    "html_url",
                    "comment_url",
                    "commit",
                    "author",
                    "committer",
                    "parents",
                    "stats",
                    "files"
                ],
                "title": "Commit",
                "description": "Commit model."
            },
            "CommitDetail": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "author": {
                        "$ref": "#/components/schemas/CommitPersonIdent"
                    },
                    "committer": {
                        "$ref": "#/components/schemas/CommitPersonIdent"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "comment_count": {
                        "type": "integer",
                        "title": "Comment Count"
                    },
                    "tree": {
                        "$ref": "#/components/schemas/CommitTree"
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "author",
                    "committer",
                    "message",
                    "comment_count",
                    "tree"
                ],
                "title": "CommitDetail",
                "description": "Commit detail model."
            },
            "CommitFile": {
                "properties": {
                    "filename": {
                        "type": "string",
                        "title": "Filename"
                    },
                    "additions": {
                        "type": "integer",
                        "title": "Additions"
                    },
                    "deletions": {
                        "type": "integer",
                        "title": "Deletions"
                    },
                    "changes": {
                        "type": "integer",
                        "title": "Changes"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "raw_url": {
                        "type": "string",
                        "title": "Raw Url"
                    },
                    "blob_url": {
                        "type": "string",
                        "title": "Blob Url"
                    },
                    "patch": {
                        "title": "Patch",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "filename",
                    "additions",
                    "deletions",
                    "changes",
                    "status",
                    "raw_url",
                    "blob_url"
                ],
                "title": "CommitFile",
                "description": "Commit file model."
            },
            "CommitPersonIdent": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email"
                    },
                    "date": {
                        "type": "string",
                        "title": "Date"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "email",
                    "date"
                ],
                "title": "CommitPersonIdent",
                "description": "Commit person identification model."
            },
            "CommitState": {
                "type": "string",
                "enum": [
                    "pending",
                    "success",
                    "error",
                    "failure"
                ],
                "title": "CommitState",
                "description": "Commit state enum."
            },
            "CommitStats": {
                "properties": {
                    "additions": {
                        "type": "integer",
                        "title": "Additions"
                    },
                    "deletions": {
                        "type": "integer",
                        "title": "Deletions"
                    },
                    "total": {
                        "type": "integer",
                        "title": "Total"
                    }
                },
                "type": "object",
                "required": [
                    "additions",
                    "deletions",
                    "total"
                ],
                "title": "CommitStats",
                "description": "Commit statistics model."
            },
            "CommitStatus": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "state": {
                        "type": "string",
                        "title": "State"
                    },
                    "target_url": {
                        "title": "Target Url",
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "context": {
                        "type": "string",
                        "title": "Context"
                    },
                    "creator": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Creator"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    }
                },
                "type": "object",
                "required": [
                    "created_at",
                    "updated_at",
                    "state",
                    "id",
                    "context",
                    "creator",
                    "url"
                ],
                "title": "CommitStatus",
                "description": "Commit status model."
            },
            "CommitTree": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "sha"
                ],
                "title": "CommitTree",
                "description": "Commit tree model."
            },
            "Content": {
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "path": {
                        "type": "string",
                        "title": "Path"
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "nullable": true
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "html_url": {
                        "type": "string",
                        "title": "Html Url"
                    },
                    "git_url": {
                        "type": "string",
                        "title": "Git Url"
                    },
                    "download_url": {
                        "title": "Download Url",
                        "type": "string",
                        "nullable": true
                    },
                    "content": {
                        "title": "Content",
                        "type": "string",
                        "nullable": true
                    },
                    "encoding": {
                        "title": "Encoding",
                        "type": "string",
                        "nullable": true
                    },
                    "links": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Links"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "path",
                    "sha",
                    "url",
                    "html_url",
                    "git_url",
                    "links"
                ],
                "title": "Content",
                "description": "Repository content model."
            },
            "CreateFile": {
                "properties": {
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "branch": {
                        "title": "Branch",
                        "type": "string",
                        "nullable": true
                    },
                    "committer": {
                        "title": "Committer",
                        "additionalProperties": true,
                        "type": "object",
                        "nullable": true
                    },
                    "sha": {
                        "title": "Sha",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "content"
                ],
                "title": "CreateFile",
                "description": "Create file model."
            },
            "CreateGitRef": {
                "properties": {
                    "ref": {
                        "type": "string",
                        "title": "Ref"
                    },
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    }
                },
                "type": "object",
                "required": [
                    "ref",
                    "sha"
                ],
                "title": "CreateGitRef",
                "description": "Create Git reference model."
            },
            "CreateRelease": {
                "properties": {
                    "tag_name": {
                        "type": "string",
                        "title": "Tag Name"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "nullable": true
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "tag_name"
                ],
                "title": "CreateRelease",
                "description": "Create release model."
            },
            "CreateStatus": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/CommitState"
                    },
                    "target_url": {
                        "title": "Target Url",
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "nullable": true
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "maxLength": 1000,
                        "nullable": true
                    },
                    "context": {
                        "title": "Context",
                        "default": "default",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "state"
                ],
                "title": "CreateStatus",
                "description": "Create status model."
            },
            "CreateWebhook": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/WebhookConfig"
                    },
                    "events": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Events"
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "config"
                ],
                "title": "CreateWebhook",
                "description": "Create webhook model."
            },
            "GitRef": {
                "properties": {
                    "ref": {
                        "type": "string",
                        "title": "Ref"
                    },
                    "node_id": {
                        "type": "string",
                        "title": "Node Id"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "object": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Object"
                    }
                },
                "type": "object",
                "required": [
                    "ref",
                    "node_id",
                    "url",
                    "object"
                ],
                "title": "GitRef",
                "description": "Git reference model."
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "Issue": {
                "properties": {
                    "number": {
                        "type": "integer",
                        "title": "Number"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "user": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "User"
                    },
                    "assignees": {
                        "items": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Assignees",
                        "default": []
                    },
                    "labels": {
                        "items": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Labels",
                        "default": []
                    },
                    "state": {
                        "type": "string",
                        "title": "State"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "title": "Updated At"
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "default": 0
                    },
                    "comments_url": {
                        "title": "Comments Url",
                        "type": "string",
                        "nullable": true
                    },
                    "html_url": {
                        "title": "Html Url",
                        "type": "string",
                        "nullable": true
                    },
                    "milestone": {
                        "title": "Milestone",
                        "additionalProperties": true,
                        "type": "object",
                        "nullable": true
                    },
                    "pull_request": {
                        "title": "Pull Request",
                        "additionalProperties": true,
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "title",
                    "user",
                    "state",
                    "created_at",
                    "updated_at"
                ],
                "title": "Issue",
                "description": "Issue model."
            },
            "IssueCreate": {
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    },
                    "assignees": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Assignees",
                        "default": []
                    },
                    "milestone": {
                        "title": "Milestone",
                        "type": "integer",
                        "nullable": true
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Labels",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "title"
                ],
                "title": "IssueCreate",
                "description": "Issue creation model."
            },
            "Label": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "color": {
                        "type": "string",
                        "title": "Color"
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "color"
                ],
                "title": "Label",
                "description": "Label model."
            },
            "LabelCreate": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "color": {
                        "type": "string",
                        "title": "Color"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "color"
                ],
                "title": "LabelCreate",
                "description": "Label creation model."
            },
            "MergePullRequest": {
                "properties": {
                    "commit_title": {
                        "title": "Commit Title",
                        "type": "string",
                        "nullable": true
                    },
                    "commit_message": {
                        "title": "Commit Message",
                        "type": "string",
                        "nullable": true
                    },
                    "merge_method": {
                        "title": "Merge Method",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "MergePullRequest",
                "description": "Merge pull request model."
            },
            "Milestone": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "html_url": {
                        "type": "string",
                        "title": "Html Url"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "number": {
                        "type": "integer",
                        "title": "Number"
                    },
                    "state": {
                        "type": "string",
                        "title": "State"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "open_issues": {
                        "type": "integer",
                        "title": "Open Issues",
                        "default": 0
                    },
                    "closed_issues": {
                        "type": "integer",
                        "title": "Closed Issues",
                        "default": 0
                    },
                    "closed_at": {
                        "title": "Closed At",
                        "type": "string",
                        "nullable": true
                    },
                    "due_on": {
                        "title": "Due On",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "html_url",
                    "id",
                    "number",
                    "state",
                    "title",
                    "description"
                ],
                "title": "Milestone",
                "description": "Milestone model."
            },
            "MilestoneCreate": {
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "state": {
                        "type": "string",
                        "title": "State",
                        "default": "open"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "nullable": true
                    },
                    "due_on": {
                        "title": "Due On",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "title"
                ],
                "title": "MilestoneCreate",
                "description": "Milestone creation model."
            },
            "Organization": {
                "properties": {
                    "login": {
                        "type": "string",
                        "title": "Login"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "title": "Updated At",
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "default": 0
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    },
                    "html_url": {
                        "title": "Html Url",
                        "type": "string",
                        "nullable": true
                    },
                    "avatar_url": {
                        "title": "Avatar Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "login",
                    "created_at"
                ],
                "title": "Organization",
                "description": "Organization model."
            },
            "OrganizationCreate": {
                "properties": {
                    "login": {
                        "type": "string",
                        "title": "Login"
                    },
                    "admin": {
                        "type": "string",
                        "title": "Admin"
                    },
                    "profile_name": {
                        "title": "Profile Name",
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "login",
                    "admin"
                ],
                "title": "OrganizationCreate",
                "description": "Organization creation model."
            },
            "PullRequest": {
                "properties": {
                    "number": {
                        "type": "integer",
                        "title": "Number"
                    },
                    "state": {
                        "type": "string",
                        "title": "State"
                    },
                    "updated_at": {
                        "type": "string",
                        "title": "Updated At"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "head": {
                        "$ref": "#/components/schemas/PullRequestCommit"
                    },
                    "base": {
                        "$ref": "#/components/schemas/PullRequestCommit"
                    },
                    "mergeable": {
                        "title": "Mergeable",
                        "type": "boolean",
                        "nullable": true
                    },
                    "merged": {
                        "type": "boolean",
                        "title": "Merged",
                        "default": false
                    },
                    "merged_at": {
                        "title": "Merged At",
                        "type": "string",
                        "nullable": true
                    },
                    "merged_by": {
                        "title": "Merged By",
                        "additionalProperties": true,
                        "type": "object",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "body": {
                        "type": "string",
                        "title": "Body"
                    },
                    "user": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "User"
                    },
                    "labels": {
                        "items": {
                            "$ref": "#/components/schemas/Label"
                        },
                        "type": "array",
                        "title": "Labels",
                        "default": []
                    },
                    "assignees": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array",
                        "title": "Assignees",
                        "default": []
                    },
                    "draft": {
                        "title": "Draft",
                        "type": "boolean",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "default": 0
                    },
                    "assignee": {
                        "title": "Assignee",
                        "additionalProperties": true,
                        "type": "object",
                        "nullable": true
                    },
                    "html_url": {
                        "type": "string",
                        "title": "Html Url"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "commits_url": {
                        "type": "string",
                        "title": "Commits Url"
                    },
                    "review_comments_url": {
                        "type": "string",
                        "title": "Review Comments Url"
                    },
                    "review_comment_url": {
                        "type": "string",
                        "title": "Review Comment Url"
                    },
                    "comments_url": {
                        "type": "string",
                        "title": "Comments Url"
                    },
                    "statuses_url": {
                        "type": "string",
                        "title": "Statuses Url"
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "state",
                    "updated_at",
                    "created_at",
                    "head",
                    "base",
                    "title",
                    "body",
                    "user",
                    "html_url",
                    "url",
                    "commits_url",
                    "review_comments_url",
                    "review_comment_url",
                    "comments_url",
                    "statuses_url"
                ],
                "title": "PullRequest",
                "description": "Pull request model."
            },
            "PullRequestCommit": {
                "properties": {
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    },
                    "ref": {
                        "type": "string",
                        "title": "Ref"
                    },
                    "repo": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Repo"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    },
                    "user": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "User"
                    }
                },
                "type": "object",
                "required": [
                    "sha",
                    "ref",
                    "repo",
                    "label",
                    "user"
                ],
                "title": "PullRequestCommit",
                "description": "Pull request commit model."
            },
            "PullRequestCreate": {
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "head": {
                        "type": "string",
                        "title": "Head"
                    },
                    "base": {
                        "type": "string",
                        "title": "Base"
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    },
                    "maintainer_can_modify": {
                        "title": "Maintainer Can Modify",
                        "type": "boolean",
                        "nullable": true
                    },
                    "draft": {
                        "title": "Draft",
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "head",
                    "base"
                ],
                "title": "PullRequestCreate",
                "description": "Pull request creation model."
            },
            "PullRequestCreateAlt": {
                "properties": {
                    "issue": {
                        "type": "integer",
                        "title": "Issue"
                    },
                    "head": {
                        "type": "string",
                        "title": "Head"
                    },
                    "base": {
                        "type": "string",
                        "title": "Base"
                    },
                    "maintainer_can_modify": {
                        "title": "Maintainer Can Modify",
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "issue",
                    "head",
                    "base"
                ],
                "title": "PullRequestCreateAlt",
                "description": "Alternative pull request creation model using an existing issue."
            },
            "PullRequestUpdate": {
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string",
                        "nullable": true
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    },
                    "state": {
                        "title": "State",
                        "type": "string",
                        "nullable": true
                    },
                    "base": {
                        "title": "Base",
                        "type": "string",
                        "nullable": true
                    },
                    "maintainer_can_modify": {
                        "title": "Maintainer Can Modify",
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "PullRequestUpdate",
                "description": "Pull request update model."
            },
            "Release": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "tag_name": {
                        "type": "string",
                        "title": "Tag Name"
                    },
                    "body": {
                        "title": "Body",
                        "type": "string",
                        "nullable": true
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "assets": {
                        "items": {
                            "$ref": "#/components/schemas/ReleaseAsset"
                        },
                        "type": "array",
                        "title": "Assets"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tag_name",
                    "author"
                ],
                "title": "Release",
                "description": "Release model."
            },
            "ReleaseAsset": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label"
                    },
                    "size": {
                        "type": "integer",
                        "title": "Size"
                    },
                    "file_id": {
                        "type": "string",
                        "title": "File Id"
                    },
                    "browser_download_url": {
                        "type": "string",
                        "title": "Browser Download Url"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "label",
                    "size",
                    "file_id",
                    "browser_download_url"
                ],
                "title": "ReleaseAsset",
                "description": "Release asset model."
            },
            "Repository": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "full_name": {
                        "type": "string",
                        "title": "Full Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "default": ""
                    },
                    "watchers": {
                        "type": "integer",
                        "title": "Watchers",
                        "default": 0
                    },
                    "forks": {
                        "type": "integer",
                        "title": "Forks",
                        "default": 0
                    },
                    "private": {
                        "type": "boolean",
                        "title": "Private",
                        "default": false
                    },
                    "default_branch": {
                        "type": "string",
                        "title": "Default Branch"
                    },
                    "owner": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Owner"
                    },
                    "has_issues": {
                        "type": "boolean",
                        "title": "Has Issues",
                        "default": true
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "default": 0
                    },
                    "forks_count": {
                        "type": "integer",
                        "title": "Forks Count",
                        "default": 0
                    },
                    "watchers_count": {
                        "type": "integer",
                        "title": "Watchers Count",
                        "default": 0
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    },
                    "clone_url": {
                        "title": "Clone Url",
                        "type": "string",
                        "nullable": true
                    },
                    "html_url": {
                        "title": "Html Url",
                        "type": "string",
                        "nullable": true
                    },
                    "ssh_url": {
                        "title": "Ssh Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "full_name",
                    "default_branch",
                    "owner"
                ],
                "title": "Repository",
                "description": "Repository model."
            },
            "RepositoryCollaborator": {
                "properties": {
                    "permission": {
                        "type": "string",
                        "title": "Permission"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object",
                "required": [
                    "permission",
                    "user"
                ],
                "title": "RepositoryCollaborator",
                "description": "Repository collaborator model."
            },
            "RepositoryCreate": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "nullable": true
                    },
                    "private": {
                        "type": "boolean",
                        "title": "Private",
                        "default": false
                    },
                    "auto_init": {
                        "type": "boolean",
                        "title": "Auto Init",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "RepositoryCreate",
                "description": "Repository creation model."
            },
            "UpdateGitRef": {
                "properties": {
                    "sha": {
                        "type": "string",
                        "title": "Sha"
                    },
                    "force": {
                        "type": "boolean",
                        "title": "Force",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "sha"
                ],
                "title": "UpdateGitRef",
                "description": "Update Git reference model."
            },
            "UpdateWebhook": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/WebhookConfig",
                        "nullable": true
                    },
                    "events": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Events"
                    },
                    "add_events": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Add Events"
                    },
                    "remove_events": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Remove Events"
                    },
                    "active": {
                        "title": "Active",
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "UpdateWebhook",
                "description": "Update webhook model."
            },
            "User": {
                "properties": {
                    "login": {
                        "type": "string",
                        "title": "Login"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "site_admin": {
                        "type": "boolean",
                        "title": "Site Admin"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "title": "Updated At",
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "nullable": true
                    },
                    "html_url": {
                        "title": "Html Url",
                        "type": "string",
                        "nullable": true
                    },
                    "avatar_url": {
                        "title": "Avatar Url",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "login",
                    "id",
                    "type",
                    "site_admin",
                    "created_at"
                ],
                "title": "User",
                "description": "User model."
            },
            "UserCreate": {
                "properties": {
                    "login": {
                        "type": "string",
                        "title": "Login"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "fullName": {
                        "title": "Fullname",
                        "type": "string",
                        "nullable": true
                    },
                    "isAdmin": {
                        "title": "Isadmin",
                        "default": false,
                        "type": "boolean",
                        "nullable": true
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "nullable": true
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "login",
                    "password",
                    "email"
                ],
                "title": "UserCreate",
                "description": "User creation model."
            },
            "UserUpdate": {
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "title": "Email",
                        "type": "string",
                        "format": "email",
                        "nullable": true
                    },
                    "blog": {
                        "title": "Blog",
                        "type": "string",
                        "nullable": true
                    },
                    "company": {
                        "title": "Company",
                        "type": "string",
                        "nullable": true
                    },
                    "location": {
                        "title": "Location",
                        "type": "string",
                        "nullable": true
                    },
                    "hireable": {
                        "title": "Hireable",
                        "type": "boolean",
                        "nullable": true
                    },
                    "bio": {
                        "title": "Bio",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "title": "UserUpdate",
                "description": "User update model."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "Webhook": {
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "events": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Events"
                    },
                    "config": {
                        "$ref": "#/components/schemas/WebhookConfig"
                    },
                    "url": {
                        "type": "string",
                        "title": "Url"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "id",
                    "name",
                    "active",
                    "events",
                    "config",
                    "url"
                ],
                "title": "Webhook",
                "description": "Webhook model."
            },
            "WebhookConfig": {
                "properties": {
                    "url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Url"
                    },
                    "content_type": {
                        "type": "string",
                        "title": "Content Type",
                        "default": "json"
                    },
                    "secret": {
                        "title": "Secret",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "WebhookConfig",
                "description": "Webhook configuration model."
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}