{
  "openapi": "3.1.0",
  "info": {
    "title": "GitBucket Mock API",
    "description": "A mock implementation of GitBucket API using FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v3/repos/{owner}/{repository}/hooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List repository webhooks",
        "description": "Retrieves a list of webhooks for a repository.",
        "operationId": "list_webhooks_api_v3_repos__owner___repository__hooks_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiWebhook"
                  },
                  "title": "Response List Webhooks Api V3 Repos  Owner   Repository  Hooks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a repository webhook",
        "description": "Creates a new webhook for a repository.",
        "operationId": "create_webhook_api_v3_repos__owner___repository__hooks_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARepositoryWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWebhook"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/hooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a repository webhook",
        "description": "Retrieves a specific webhook for a repository.",
        "operationId": "get_webhook_api_v3_repos__owner___repository__hooks__id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the webhook",
              "title": "Id"
            },
            "description": "The ID of the webhook"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWebhook"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a repository webhook",
        "description": "Updates an existing webhook for a repository.",
        "operationId": "update_webhook_api_v3_repos__owner___repository__hooks__id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the webhook",
              "title": "Id"
            },
            "description": "The ID of the webhook"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateARepositoryWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWebhook"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a repository webhook",
        "description": "Deletes a webhook from a repository.",
        "operationId": "delete_webhook_api_v3_repos__owner___repository__hooks__id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the webhook",
              "title": "Id"
            },
            "description": "The ID of the webhook"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/hooks/{id}/test": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Test a repository webhook",
        "description": "Tests a webhook by sending a ping event.",
        "operationId": "test_webhook_api_v3_repos__owner___repository__hooks__id__test_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the webhook",
              "title": "Id"
            },
            "description": "The ID of the webhook"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/readme": {
      "get": {
        "tags": [
          "Contents"
        ],
        "summary": "Get Readme",
        "description": "Get repository README",
        "operationId": "get_readme_api_v3_repos__owner___repository__readme_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ref"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiContents"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/contents/{path}": {
      "get": {
        "tags": [
          "Contents"
        ],
        "summary": "Get Repository Contents",
        "description": "Get repository contents",
        "operationId": "get_repository_contents_api_v3_repos__owner___repository__contents__path__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ref"
            }
          },
          {
            "name": "large_file",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Large File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ApiContents"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApiContents"
                      }
                    }
                  ],
                  "title": "Response Get Repository Contents Api V3 Repos  Owner   Repository  Contents  Path  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contents"
        ],
        "summary": "Create Update File",
        "description": "Create or update a file",
        "operationId": "create_update_file_api_v3_repos__owner___repository__contents__path__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Create Update File Api V3 Repos  Owner   Repository  Contents  Path  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/raw/{path}": {
      "get": {
        "tags": [
          "Contents"
        ],
        "summary": "Get Raw File Content",
        "description": "Get raw file contents\n\nThe path parameter should be in the format: {ref}/{file_path}\nwhere ref is the branch/commit/tag and file_path is the path to the file.\nExample: /api/v3/repos/owner/repo/raw/main/src/file.txt",
        "operationId": "get_raw_file_content_api_v3_repos__owner___repository__raw__path__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/pulls": {
      "get": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Get Pull Requests",
        "description": "Get list of pull requests for a repository",
        "operationId": "get_pull_requests_api_v3_repos__owner___repository__pulls_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "open",
              "title": "State"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 30,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPullRequest"
                  },
                  "title": "Response Get Pull Requests Api V3 Repos  Owner   Repository  Pulls Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Create New Pull Request",
        "description": "Create a pull request",
        "operationId": "create_new_pull_request_api_v3_repos__owner___repository__pulls_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPullRequest"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/pulls/{pr_number}": {
      "get": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Get Pull Request Info",
        "description": "Get a specific pull request",
        "operationId": "get_pull_request_info_api_v3_repos__owner___repository__pulls__pr_number__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "pr_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pr Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPullRequest"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Update Pull Request Info",
        "description": "Update a pull request",
        "operationId": "update_pull_request_info_api_v3_repos__owner___repository__pulls__pr_number__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "pr_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pr Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPullRequest"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/pulls/{pr_number}/commits": {
      "get": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Get Pull Request Commit List",
        "description": "Get list of commits for a pull request",
        "operationId": "get_pull_request_commit_list_api_v3_repos__owner___repository__pulls__pr_number__commits_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "pr_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pr Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCommitListItem"
                  },
                  "title": "Response Get Pull Request Commit List Api V3 Repos  Owner   Repository  Pulls  Pr Number  Commits Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/pulls/{pr_number}/merge": {
      "get": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Check Pull Request Merged",
        "description": "Check if a pull request is merged\n\nIMPORTANT: GitBucket's implementation has logical issues and differs from GitHub API.\n\nGitBucket's checkConflict() function checks merge POSSIBILITY, not merge STATUS:\n- Returns 204 when: PR is mergeable OR has conflicts OR is actually merged\n- Returns 404 when: Merge status is unknown/uncached\n\nThis means GitBucket incorrectly returns 204 for:\n1. ✅ Actually merged pull requests (correct)\n2. ❌ Unmerged but mergeable pull requests (wrong)\n3. ❌ Unmerged pull requests with conflicts (wrong)\n\nGitHub API behavior:\n- 204: Pull request IS merged\n- 404: Pull request is NOT merged\n\nGitBucket API behavior:\n- 204: Pull request is mergeable, has conflicts, OR is merged\n- 404: Merge status unknown or PR/repo not found\n\nDue to this implementation issue, you cannot reliably determine if a PR is\nactually merged using this endpoint in GitBucket.",
        "operationId": "check_pull_request_merged_api_v3_repos__owner___repository__pulls__pr_number__merge_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "pr_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pr Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PullRequests"
        ],
        "summary": "Merge Pull Request Endpoint",
        "description": "Merge a pull request",
        "operationId": "merge_pull_request_endpoint_api_v3_repos__owner___repository__pulls__pr_number__merge_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "pr_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pr Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeAPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessToMergePrResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/milestones": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get Milestones",
        "description": "Get list of milestones for a repository",
        "operationId": "get_milestones_api_v3_repos__owner___repository__milestones_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiMilestone"
                  },
                  "title": "Response Get Milestones Api V3 Repos  Owner   Repository  Milestones Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Milestones"
        ],
        "summary": "Create New Milestone",
        "description": "Create a milestone\n\nNote: GitBucket has strict validation for milestone titles:\n- Maximum 100 characters\n- Only alphanumeric characters, hyphens, plus signs, underscores, and periods allowed\n- No spaces, Japanese characters, or other symbols permitted\n- Pattern: [a-zA-Z0-9\\-\\+_.]+",
        "operationId": "create_new_milestone_api_v3_repos__owner___repository__milestones_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAMilestone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMilestone"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/milestones/{milestone_number}": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get Milestone Info",
        "description": "Get a specific milestone",
        "operationId": "get_milestone_info_api_v3_repos__owner___repository__milestones__milestone_number__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Milestone Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMilestone"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Milestones"
        ],
        "summary": "Update Milestone Info",
        "description": "Update a milestone\n\nNote: GitBucket has strict validation for milestone titles:\n- Maximum 100 characters\n- Only alphanumeric characters, hyphens, plus signs, underscores, and periods allowed\n- No spaces, Japanese characters, or other symbols permitted\n- Pattern: [a-zA-Z0-9\\-\\+_.]+",
        "operationId": "update_milestone_info_api_v3_repos__owner___repository__milestones__milestone_number__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Milestone Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAMilestone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMilestone"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Milestones"
        ],
        "summary": "Delete Milestone Info",
        "description": "Delete a milestone",
        "operationId": "delete_milestone_info_api_v3_repos__owner___repository__milestones__milestone_number__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Milestone Number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organizations",
        "description": "Get list of all organizations",
        "operationId": "get_organizations_api_v3_organizations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiGroup"
                  },
                  "type": "array",
                  "title": "Response Get Organizations Api V3 Organizations Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/orgs/{org_name}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization",
        "description": "Get specific organization information",
        "operationId": "get_organization_api_v3_orgs__org_name__get",
        "parameters": [
          {
            "name": "org_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/users/{username}/orgs": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get User Organizations",
        "description": "Get organizations that a specific user belongs to",
        "operationId": "get_user_organizations_api_v3_users__username__orgs_get",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroup"
                  },
                  "title": "Response Get User Organizations Api V3 Users  Username  Orgs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/user/orgs": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Authenticated User Organizations",
        "description": "Get organizations that the authenticated user belongs to",
        "operationId": "get_authenticated_user_organizations_api_v3_user_orgs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiGroup"
                  },
                  "type": "array",
                  "title": "Response Get Authenticated User Organizations Api V3 User Orgs Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v3/admin/organizations": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create New Organization",
        "description": "Create a new organization (admin only)",
        "operationId": "create_new_organization_api_v3_admin_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v3/repos/{owner}/{repository}/commits": {
      "get": {
        "tags": [
          "Commits"
        ],
        "summary": "Get Commits",
        "description": "Get list of commits for a repository",
        "operationId": "get_commits_api_v3_repos__owner___repository__commits_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "sha",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sha"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Path"
            }
          },
          {
            "name": "author",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Author"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Until"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 30,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCommitListItem"
                  },
                  "title": "Response Get Commits Api V3 Repos  Owner   Repository  Commits Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/commits/{sha}": {
      "get": {
        "tags": [
          "Commits"
        ],
        "summary": "Get Commit Info",
        "description": "Get specific commit information",
        "operationId": "get_commit_info_api_v3_repos__owner___repository__commits__sha__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCommits"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/commits/{sha}/branches-where-head": {
      "get": {
        "tags": [
          "Commits"
        ],
        "summary": "Get Branches Where Head",
        "description": "Get branches where specific commit is HEAD",
        "operationId": "get_branches_where_head_api_v3_repos__owner___repository__commits__sha__branches_where_head_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiBranchForHeadCommit"
                  },
                  "title": "Response Get Branches Where Head Api V3 Repos  Owner   Repository  Commits  Sha  Branches Where Head Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/commits/{ref}/status": {
      "get": {
        "tags": [
          "Commits"
        ],
        "summary": "Get Combined Commit Status",
        "description": "Get combined status for a specific reference",
        "operationId": "get_combined_commit_status_api_v3_repos__owner___repository__commits__ref__status_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ref"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCombinedCommitStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/commits/{ref}/statuses": {
      "get": {
        "tags": [
          "Commits"
        ],
        "summary": "Get Commit Status List",
        "description": "Get list of statuses for a specific reference",
        "operationId": "get_commit_status_list_api_v3_repos__owner___repository__commits__ref__statuses_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ref"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCommitStatus"
                  },
                  "title": "Response Get Commit Status List Api V3 Repos  Owner   Repository  Commits  Ref  Statuses Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/statuses/{sha}": {
      "post": {
        "tags": [
          "Commits"
        ],
        "summary": "Create Status",
        "description": "Create a commit status",
        "operationId": "create_status_api_v3_repos__owner___repository__statuses__sha__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sha"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCommitStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get Issues",
        "description": "Get list of issues for a repository",
        "operationId": "get_issues_api_v3_repos__owner___repository__issues_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "open",
              "title": "State"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 30,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiIssue"
                  },
                  "title": "Response Get Issues Api V3 Repos  Owner   Repository  Issues Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Issues"
        ],
        "summary": "Create New Issue",
        "description": "Create an issue",
        "operationId": "create_new_issue_api_v3_repos__owner___repository__issues_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIssue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues/{issue_number}": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get Issue Info",
        "description": "Get a specific issue",
        "operationId": "get_issue_info_api_v3_repos__owner___repository__issues__issue_number__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIssue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Issues"
        ],
        "summary": "Update Issue Info",
        "description": "Update an issue",
        "operationId": "update_issue_info_api_v3_repos__owner___repository__issues__issue_number__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIssue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues/{issue_number}/comments": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get Issue Comment List",
        "description": "Get list of comments for an issue",
        "operationId": "get_issue_comment_list_api_v3_repos__owner___repository__issues__issue_number__comments_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiComment"
                  },
                  "title": "Response Get Issue Comment List Api V3 Repos  Owner   Repository  Issues  Issue Number  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Issues"
        ],
        "summary": "Create Issue Comment",
        "description": "Create a comment",
        "operationId": "create_issue_comment_api_v3_repos__owner___repository__issues__issue_number__comments_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues/comments/{comment_id}": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get Issue Comment",
        "description": "Get a specific comment",
        "operationId": "get_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Issues"
        ],
        "summary": "Update Issue Comment",
        "description": "Update a comment",
        "operationId": "update_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Issues"
        ],
        "summary": "Delete Issue Comment",
        "description": "Delete a comment",
        "operationId": "delete_issue_comment_api_v3_repos__owner___repository__issues_comments__comment_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Comment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "List releases",
        "description": "Retrieves a list of releases for a repository.",
        "operationId": "list_releases_api_v3_repos__owner___repository__releases_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiRelease"
                  },
                  "title": "Response List Releases Api V3 Repos  Owner   Repository  Releases Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Create a release",
        "description": "Creates a new release in a repository.",
        "operationId": "create_release_api_v3_repos__owner___repository__releases_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARelease"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelease"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases/latest": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get the latest release",
        "description": "Retrieves the latest release for a repository.",
        "operationId": "get_latest_release_api_v3_repos__owner___repository__releases_latest_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelease"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases/tags/{tag}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a release by tag name",
        "description": "Retrieves a specific release by its tag name. This is the primary way to get a specific release in GitBucket since release IDs are not supported.",
        "operationId": "get_release_by_tag_api_v3_repos__owner___repository__releases_tags__tag__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag name of the release",
              "title": "Tag"
            },
            "description": "The tag name of the release"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelease"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases/{tag}": {
      "patch": {
        "tags": [
          "Releases"
        ],
        "summary": "Update a release",
        "description": "Updates an existing release. GitBucket Specific: Uses :tag parameter instead of :release_id like GitHub API.",
        "operationId": "update_release_api_v3_repos__owner___repository__releases__tag__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag name of the release to update",
              "title": "Tag"
            },
            "description": "The tag name of the release to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARelease"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelease"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "summary": "Delete a release",
        "description": "Deletes a release from a repository. GitBucket Specific: Uses :tag parameter instead of :release_id like GitHub API.",
        "operationId": "delete_release_api_v3_repos__owner___repository__releases__tag__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag name of the release to delete",
              "title": "Tag"
            },
            "description": "The tag name of the release to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases/{tag}/assets": {
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Upload a release asset",
        "description": "Uploads an asset to a release.",
        "operationId": "upload_release_asset_api_v3_repos__owner___repository__releases__tag__assets_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag name of the release",
              "title": "Tag"
            },
            "description": "The tag name of the release"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the asset",
              "title": "Name"
            },
            "description": "The name of the asset"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReleaseAsset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/releases/{tag}/assets/{file_id}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a release asset",
        "description": "Retrieves a specific release asset. GitBucket Specific: Requires both :tag and :file_id parameters, unlike GitHub which only needs :asset_id.",
        "operationId": "get_release_asset_api_v3_repos__owner___repository__releases__tag__assets__file_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag name of the release",
              "title": "Tag"
            },
            "description": "The tag name of the release"
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The file ID of the asset",
              "title": "File Id"
            },
            "description": "The file ID of the asset"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReleaseAsset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repositories": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get Repositories",
        "description": "Get all public repositories",
        "operationId": "get_repositories_api_v3_repositories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiRepository"
                  },
                  "type": "array",
                  "title": "Response Get Repositories Api V3 Repositories Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/user/repos": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get Authenticated User Repositories",
        "description": "Get repositories for authenticated user",
        "operationId": "get_authenticated_user_repositories_api_v3_user_repos_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiRepository"
                  },
                  "type": "array",
                  "title": "Response Get Authenticated User Repositories Api V3 User Repos Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Repositories"
        ],
        "summary": "Create User Repository",
        "description": "Create a repository for authenticated user",
        "operationId": "create_user_repository_api_v3_user_repos_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARepository"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRepository"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v3/users/{username}/repos": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get User Repos",
        "description": "Get repositories for a specific user",
        "operationId": "get_user_repos_api_v3_users__username__repos_get",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiRepository"
                  },
                  "title": "Response Get User Repos Api V3 Users  Username  Repos Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/orgs/{org_name}/repos": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get Organization Repos",
        "description": "Get repositories for an organization",
        "operationId": "get_organization_repos_api_v3_orgs__org_name__repos_get",
        "parameters": [
          {
            "name": "org_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiRepository"
                  },
                  "title": "Response Get Organization Repos Api V3 Orgs  Org Name  Repos Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repositories"
        ],
        "summary": "Create Organization Repository",
        "description": "Create a repository for an organization",
        "operationId": "create_organization_repository_api_v3_orgs__org_name__repos_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARepository"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRepository"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get Repo",
        "description": "Get specific repository information",
        "operationId": "get_repo_api_v3_repos__owner___repository__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRepository"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List repository tags",
        "description": "Retrieves a list of tags for a repository.",
        "operationId": "list_repository_tags_api_v3_repos__owner___repository__tags_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The owner of the repository",
              "title": "Owner"
            },
            "description": "The owner of the repository"
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the repository",
              "title": "Repository"
            },
            "description": "The name of the repository"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTag"
                  },
                  "title": "Response List Repository Tags Api V3 Repos  Owner   Repository  Tags Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/git/refs": {
      "get": {
        "tags": [
          "GitReferences"
        ],
        "summary": "Get References",
        "description": "Get all references for a repository",
        "operationId": "get_references_api_v3_repos__owner___repository__git_refs_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiRef"
                  },
                  "title": "Response Get References Api V3 Repos  Owner   Repository  Git Refs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GitReferences"
        ],
        "summary": "Create Reference",
        "description": "Create a new reference",
        "operationId": "create_reference_api_v3_repos__owner___repository__git_refs_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateARef"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRef"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/git/refs/{ref}": {
      "get": {
        "tags": [
          "GitReferences"
        ],
        "summary": "Get Reference",
        "description": "Get a specific reference",
        "operationId": "get_reference_api_v3_repos__owner___repository__git_refs__ref__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ref"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRef"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "GitReferences"
        ],
        "summary": "Update Reference",
        "description": "Update a reference",
        "operationId": "update_reference_api_v3_repos__owner___repository__git_refs__ref__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ref"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateARef"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRef"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GitReferences"
        ],
        "summary": "Delete Reference",
        "description": "Delete a reference",
        "operationId": "delete_reference_api_v3_repos__owner___repository__git_refs__ref__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ref"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/branches": {
      "get": {
        "tags": [
          "Branches"
        ],
        "summary": "Get Branches",
        "description": "Get list of branches for a repository",
        "operationId": "get_branches_api_v3_repos__owner___repository__branches_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiBranchForList"
                  },
                  "title": "Response Get Branches Api V3 Repos  Owner   Repository  Branches Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/branches/{branch}": {
      "get": {
        "tags": [
          "Branches"
        ],
        "summary": "Get Branch Info",
        "description": "Get specific branch information",
        "operationId": "get_branch_info_api_v3_repos__owner___repository__branches__branch__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBranch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Branches"
        ],
        "summary": "Update Branch Protection Settings",
        "description": "Update branch protection settings",
        "operationId": "update_branch_protection_settings_api_v3_repos__owner___repository__branches__branch__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBranchProtectionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBranch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection": {
      "get": {
        "tags": [
          "Branches"
        ],
        "summary": "Get Branch Protection Info",
        "description": "Get branch protection settings",
        "operationId": "get_branch_protection_info_api_v3_repos__owner___repository__branches__branch__protection_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBranchProtection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Branches"
        ],
        "summary": "Delete Branch Protection Settings",
        "description": "Delete branch protection settings",
        "operationId": "delete_branch_protection_settings_api_v3_repos__owner___repository__branches__branch__protection_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection/required_status_checks": {
      "get": {
        "tags": [
          "Branches"
        ],
        "summary": "Get Branch Required Status Checks",
        "description": "Get required status checks for a branch",
        "operationId": "get_branch_required_status_checks_api_v3_repos__owner___repository__branches__branch__protection_required_status_checks_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBranchProtectionStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/branches/{branch}/protection/required_status_checks/contexts": {
      "get": {
        "tags": [
          "Branches"
        ],
        "summary": "Get Branch Required Status Check Contexts",
        "description": "Get required status check contexts for a branch",
        "operationId": "get_branch_required_status_check_contexts_api_v3_repos__owner___repository__branches__branch__protection_required_status_checks_contexts_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Get Branch Required Status Check Contexts Api V3 Repos  Owner   Repository  Branches  Branch  Protection Required Status Checks Contexts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/collaborators": {
      "get": {
        "tags": [
          "Collaborators"
        ],
        "summary": "Get Collaborators",
        "description": "Get collaborators for a repository",
        "operationId": "get_collaborators_api_v3_repos__owner___repository__collaborators_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUser"
                  },
                  "title": "Response Get Collaborators Api V3 Repos  Owner   Repository  Collaborators Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/collaborators/{username}": {
      "get": {
        "tags": [
          "Collaborators"
        ],
        "summary": "Check User Is Collaborator",
        "description": "Check if user is a repository collaborator",
        "operationId": "check_user_is_collaborator_api_v3_repos__owner___repository__collaborators__username__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Collaborators"
        ],
        "summary": "Add Repository Collaborator",
        "description": "Add a collaborator",
        "operationId": "add_repository_collaborator_api_v3_repos__owner___repository__collaborators__username__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddACollaborator"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collaborators"
        ],
        "summary": "Remove Repository Collaborator",
        "description": "Remove a collaborator",
        "operationId": "remove_repository_collaborator_api_v3_repos__owner___repository__collaborators__username__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/collaborators/{username}/permission": {
      "get": {
        "tags": [
          "Collaborators"
        ],
        "summary": "Get User Permission",
        "description": "Get collaborator permissions",
        "operationId": "get_user_permission_api_v3_repos__owner___repository__collaborators__username__permission_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRepositoryCollaborator"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Get list of all users",
        "operationId": "get_users_api_v3_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiUser"
                  },
                  "type": "array",
                  "title": "Response Get Users Api V3 Users Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/users/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get specific user information",
        "operationId": "get_user_api_v3_users__username__get",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Authenticated User",
        "description": "Get authenticated user information",
        "operationId": "get_authenticated_user_api_v3_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update Authenticated User",
        "description": "Update authenticated user information",
        "operationId": "update_authenticated_user_api_v3_user_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v3/admin/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create New User",
        "description": "Create a new user (admin only)",
        "operationId": "create_new_user_api_v3_admin_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v3/users/{username}/suspended": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Suspend User",
        "description": "Suspend user account (admin only)",
        "operationId": "suspend_user_api_v3_users__username__suspended_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Unsuspend User",
        "description": "Unsuspend user account (admin only)",
        "operationId": "unsuspend_user_api_v3_users__username__suspended_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/labels": {
      "get": {
        "tags": [
          "Labels"
        ],
        "summary": "Get Labels",
        "description": "Get list of labels for a repository",
        "operationId": "get_labels_api_v3_repos__owner___repository__labels_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLabel"
                  },
                  "title": "Response Get Labels Api V3 Repos  Owner   Repository  Labels Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Labels"
        ],
        "summary": "Create New Label",
        "description": "Create a label",
        "operationId": "create_new_label_api_v3_repos__owner___repository__labels_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateALabel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/labels/{label_name}": {
      "get": {
        "tags": [
          "Labels"
        ],
        "summary": "Get Label Info",
        "description": "Get a specific label",
        "operationId": "get_label_info_api_v3_repos__owner___repository__labels__label_name__get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "label_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Labels"
        ],
        "summary": "Update Label Info",
        "description": "Update a label",
        "operationId": "update_label_info_api_v3_repos__owner___repository__labels__label_name__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "label_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateALabel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Labels"
        ],
        "summary": "Delete Label Info",
        "description": "Delete a label",
        "operationId": "delete_label_info_api_v3_repos__owner___repository__labels__label_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "label_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues/{issue_number}/labels": {
      "get": {
        "tags": [
          "Labels"
        ],
        "summary": "Get Issue Label List",
        "description": "Get list of labels for an issue",
        "operationId": "get_issue_label_list_api_v3_repos__owner___repository__issues__issue_number__labels_get",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLabel"
                  },
                  "title": "Response Get Issue Label List Api V3 Repos  Owner   Repository  Issues  Issue Number  Labels Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Labels"
        ],
        "summary": "Add Labels To Issue Endpoint",
        "description": "Add labels to an issue",
        "operationId": "add_labels_to_issue_endpoint_api_v3_repos__owner___repository__issues__issue_number__labels_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLabelsToAnIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLabel"
                  },
                  "title": "Response Add Labels To Issue Endpoint Api V3 Repos  Owner   Repository  Issues  Issue Number  Labels Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Labels"
        ],
        "summary": "Replace All Labels Endpoint",
        "description": "Replace all labels for an issue",
        "operationId": "replace_all_labels_endpoint_api_v3_repos__owner___repository__issues__issue_number__labels_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLabelsToAnIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLabel"
                  },
                  "title": "Response Replace All Labels Endpoint Api V3 Repos  Owner   Repository  Issues  Issue Number  Labels Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Labels"
        ],
        "summary": "Remove All Labels Endpoint",
        "description": "Remove all labels from an issue",
        "operationId": "remove_all_labels_endpoint_api_v3_repos__owner___repository__issues__issue_number__labels_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/repos/{owner}/{repository}/issues/{issue_number}/labels/{label_name}": {
      "delete": {
        "tags": [
          "Labels"
        ],
        "summary": "Remove Label From Issue Endpoint",
        "description": "Remove a label from an issue",
        "operationId": "remove_label_from_issue_endpoint_api_v3_repos__owner___repository__issues__issue_number__labels__label_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repository"
            }
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Issue Number"
            }
          },
          {
            "name": "label_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLabel"
                  },
                  "title": "Response Remove Label From Issue Endpoint Api V3 Repos  Owner   Repository  Issues  Issue Number  Labels  Label Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddACollaborator": {
        "properties": {
          "permission": {
            "type": "string",
            "title": "Permission"
          }
        },
        "type": "object",
        "required": [
          "permission"
        ],
        "title": "AddACollaborator",
        "description": "Model for adding a collaborator to a repository."
      },
      "AddLabelsToAnIssue": {
        "properties": {
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels"
          }
        },
        "type": "object",
        "required": [
          "labels"
        ],
        "title": "AddLabelsToAnIssue",
        "description": "Model for adding labels to an issue."
      },
      "ApiBranch": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiBranchCommit"
          },
          "protection": {
            "$ref": "#/components/schemas/ApiBranchProtection"
          }
        },
        "type": "object",
        "required": [
          "name",
          "commit",
          "protection"
        ],
        "title": "ApiBranch",
        "description": "Branch model for API responses."
      },
      "ApiBranchCommit": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          }
        },
        "type": "object",
        "required": [
          "sha"
        ],
        "title": "ApiBranchCommit",
        "description": "Branch commit model for API responses."
      },
      "ApiBranchForHeadCommit": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiBranchCommit"
          },
          "protected": {
            "type": "boolean",
            "title": "Protected"
          }
        },
        "type": "object",
        "required": [
          "name",
          "commit",
          "protected"
        ],
        "title": "ApiBranchForHeadCommit",
        "description": "Branch model for head commit API responses."
      },
      "ApiBranchForList": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiBranchCommit"
          }
        },
        "type": "object",
        "required": [
          "name",
          "commit"
        ],
        "title": "ApiBranchForList",
        "description": "Branch model for list API responses."
      },
      "ApiBranchProtection": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "required_status_checks": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiBranchProtectionStatus"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "enabled"
        ],
        "title": "ApiBranchProtection",
        "description": "Branch protection model for API responses."
      },
      "ApiBranchProtectionStatus": {
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "enforcement_level": {
            "type": "string",
            "title": "Enforcement Level"
          },
          "contexts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Contexts"
          },
          "contexts_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contexts Url"
          }
        },
        "type": "object",
        "required": [
          "enforcement_level",
          "contexts"
        ],
        "title": "ApiBranchProtectionStatus",
        "description": "Branch protection status model for API responses."
      },
      "ApiBranchProtectionUpdate": {
        "properties": {
          "protection": {
            "$ref": "#/components/schemas/BranchProtectionUpdateRequest"
          }
        },
        "type": "object",
        "required": [
          "protection"
        ],
        "title": "ApiBranchProtectionUpdate",
        "description": "Model for updating branch protection."
      },
      "ApiCombinedCommitStatus": {
        "properties": {
          "state": {
            "type": "string",
            "title": "State"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "statuses": {
            "items": {
              "$ref": "#/components/schemas/ApiCommitStatus"
            },
            "type": "array",
            "title": "Statuses"
          },
          "repository": {
            "$ref": "#/components/schemas/ApiRepository"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "state",
          "sha",
          "total_count",
          "statuses",
          "repository",
          "url"
        ],
        "title": "ApiCombinedCommitStatus",
        "description": "Combined commit status model for API responses."
      },
      "ApiComment": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "user": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user",
          "body",
          "created_at",
          "updated_at",
          "html_url"
        ],
        "title": "ApiComment",
        "description": "Comment model for API responses."
      },
      "ApiCommitDetail": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "author": {
            "$ref": "#/components/schemas/ApiPersonIdent"
          },
          "committer": {
            "$ref": "#/components/schemas/ApiPersonIdent"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "comment_count": {
            "type": "integer",
            "title": "Comment Count"
          },
          "tree": {
            "$ref": "#/components/schemas/ApiCommitTree"
          }
        },
        "type": "object",
        "required": [
          "url",
          "author",
          "committer",
          "message",
          "comment_count",
          "tree"
        ],
        "title": "ApiCommitDetail",
        "description": "Commit detail model for API responses."
      },
      "ApiCommitFile": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "additions": {
            "type": "integer",
            "title": "Additions"
          },
          "deletions": {
            "type": "integer",
            "title": "Deletions"
          },
          "changes": {
            "type": "integer",
            "title": "Changes"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "raw_url": {
            "type": "string",
            "title": "Raw Url"
          },
          "blob_url": {
            "type": "string",
            "title": "Blob Url"
          },
          "patch": {
            "type": "string",
            "title": "Patch"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "additions",
          "deletions",
          "changes",
          "status",
          "raw_url",
          "blob_url",
          "patch"
        ],
        "title": "ApiCommitFile",
        "description": "Commit file model for API responses."
      },
      "ApiCommitListItem": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiCommitDetail"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "comments_url": {
            "type": "string",
            "title": "Comments Url"
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "committer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/ApiCommitTree"
            },
            "type": "array",
            "title": "Parents"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "commit",
          "url",
          "html_url",
          "comments_url",
          "parents"
        ],
        "title": "ApiCommitListItem",
        "description": "Commit list item model for API responses."
      },
      "ApiCommitStats": {
        "properties": {
          "additions": {
            "type": "integer",
            "title": "Additions"
          },
          "deletions": {
            "type": "integer",
            "title": "Deletions"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "additions",
          "deletions",
          "total"
        ],
        "title": "ApiCommitStats",
        "description": "Commit stats model for API responses."
      },
      "ApiCommitStatus": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "target_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Url"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "context": {
            "type": "string",
            "title": "Context"
          },
          "creator": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "state",
          "id",
          "context",
          "creator",
          "url"
        ],
        "title": "ApiCommitStatus",
        "description": "Commit status model for API responses."
      },
      "ApiCommitTree": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          }
        },
        "type": "object",
        "required": [
          "url",
          "sha"
        ],
        "title": "ApiCommitTree",
        "description": "Commit tree model for API responses."
      },
      "ApiCommits": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "comment_url": {
            "type": "string",
            "title": "Comment Url"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiCommitDetail"
          },
          "author": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "committer": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/ApiCommitTree"
            },
            "type": "array",
            "title": "Parents"
          },
          "stats": {
            "$ref": "#/components/schemas/ApiCommitStats"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/ApiCommitFile"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "url",
          "sha",
          "html_url",
          "comment_url",
          "commit",
          "author",
          "committer",
          "parents",
          "stats",
          "files"
        ],
        "title": "ApiCommits",
        "description": "Commit model for API responses."
      },
      "ApiContents": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "encoding": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Encoding"
          },
          "download_url": {
            "type": "string",
            "title": "Download Url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "name",
          "path",
          "sha",
          "download_url"
        ],
        "title": "ApiContents",
        "description": "Contents model for API responses.\n\nThis model represents both files and directories in repository contents.\nThe response is always an array of ApiContents objects:\n- For files: Array contains a single object with 'content' and 'encoding' fields\n- For directories: Array contains multiple objects without 'content' and 'encoding' fields\n\nThis unified approach avoids Union types for better OpenAPI schema compatibility."
      },
      "ApiGroup": {
        "properties": {
          "login": {
            "type": "string",
            "title": "Login"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "default": 0
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": [
          "login",
          "created_at",
          "url",
          "html_url",
          "avatar_url"
        ],
        "title": "ApiGroup",
        "description": "Organization model for API responses."
      },
      "ApiIssue": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "user": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/ApiUser"
            },
            "type": "array",
            "title": "Assignees"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/ApiLabel"
            },
            "type": "array",
            "title": "Labels"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "milestone": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiMilestone"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "default": 0
          },
          "assignee": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "comments_url": {
            "type": "string",
            "title": "Comments Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "pull_request": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pull Request"
          }
        },
        "type": "object",
        "required": [
          "number",
          "title",
          "user",
          "assignees",
          "labels",
          "state",
          "created_at",
          "updated_at",
          "body",
          "comments_url",
          "html_url"
        ],
        "title": "ApiIssue",
        "description": "Issue model for API responses."
      },
      "ApiLabel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "color": {
            "type": "string",
            "title": "Color"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "color",
          "url"
        ],
        "title": "ApiLabel",
        "description": "Label model for API responses."
      },
      "ApiMilestone": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "open_issues": {
            "type": "integer",
            "title": "Open Issues"
          },
          "closed_issues": {
            "type": "integer",
            "title": "Closed Issues"
          },
          "closed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Closed At"
          },
          "due_on": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due On"
          }
        },
        "type": "object",
        "required": [
          "url",
          "html_url",
          "id",
          "number",
          "state",
          "title",
          "description",
          "open_issues",
          "closed_issues"
        ],
        "title": "ApiMilestone",
        "description": "Milestone model for API responses."
      },
      "ApiPersonIdent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          }
        },
        "type": "object",
        "required": [
          "name",
          "email",
          "date"
        ],
        "title": "ApiPersonIdent",
        "description": "Person identification model for API responses."
      },
      "ApiPullRequest": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "Number"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "head": {
            "$ref": "#/components/schemas/ApiPullRequestCommit"
          },
          "base": {
            "$ref": "#/components/schemas/ApiPullRequestCommit"
          },
          "mergeable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mergeable"
          },
          "merged": {
            "type": "boolean",
            "title": "Merged"
          },
          "merged_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merged At"
          },
          "merged_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "user": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/ApiLabel"
            },
            "type": "array",
            "title": "Labels"
          },
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/ApiUser"
            },
            "type": "array",
            "title": "Assignees"
          },
          "draft": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Draft"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "default": 0
          },
          "assignee": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiUser"
              },
              {
                "type": "null"
              }
            ]
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "commits_url": {
            "type": "string",
            "title": "Commits Url"
          },
          "review_comments_url": {
            "type": "string",
            "title": "Review Comments Url"
          },
          "review_comment_url": {
            "type": "string",
            "title": "Review Comment Url"
          },
          "comments_url": {
            "type": "string",
            "title": "Comments Url"
          },
          "statuses_url": {
            "type": "string",
            "title": "Statuses Url"
          }
        },
        "type": "object",
        "required": [
          "number",
          "state",
          "updated_at",
          "created_at",
          "head",
          "base",
          "merged",
          "title",
          "body",
          "user",
          "labels",
          "assignees",
          "html_url",
          "url",
          "commits_url",
          "review_comments_url",
          "review_comment_url",
          "comments_url",
          "statuses_url"
        ],
        "title": "ApiPullRequest",
        "description": "Pull request model for API responses."
      },
      "ApiPullRequestCommit": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "ref": {
            "type": "string",
            "title": "Ref"
          },
          "repo": {
            "$ref": "#/components/schemas/ApiRepository"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "ref",
          "repo"
        ],
        "title": "ApiPullRequestCommit",
        "description": "Pull request commit model for API responses."
      },
      "ApiPusher": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "title": "ApiPusher",
        "description": "Pusher model for API responses."
      },
      "ApiRef": {
        "properties": {
          "ref": {
            "type": "string",
            "title": "Ref"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "default": ""
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "object": {
            "$ref": "#/components/schemas/ApiRefCommit"
          }
        },
        "type": "object",
        "required": [
          "ref",
          "url",
          "object"
        ],
        "title": "ApiRef",
        "description": "Git reference model for API responses."
      },
      "ApiRefCommit": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "type",
          "url"
        ],
        "title": "ApiRefCommit",
        "description": "Git reference commit model for API responses."
      },
      "ApiRelease": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "tag_name": {
            "type": "string",
            "title": "Tag Name"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          },
          "author": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "assets": {
            "items": {
              "$ref": "#/components/schemas/ApiReleaseAsset"
            },
            "type": "array",
            "title": "Assets"
          }
        },
        "type": "object",
        "required": [
          "name",
          "tag_name",
          "author",
          "assets"
        ],
        "title": "ApiRelease",
        "description": "Release model for API responses.\n\nGitBucket Specific: No release ID field, tag_name is the primary identifier."
      },
      "ApiReleaseAsset": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "browser_download_url": {
            "type": "string",
            "title": "Browser Download Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "size",
          "label",
          "file_id",
          "browser_download_url"
        ],
        "title": "ApiReleaseAsset",
        "description": "Release asset model for API responses.\n\nGitBucket Specific: Uses file_id instead of GitHub's asset_id."
      },
      "ApiRepository": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "watchers": {
            "type": "integer",
            "title": "Watchers"
          },
          "forks": {
            "type": "integer",
            "title": "Forks"
          },
          "private": {
            "type": "boolean",
            "title": "Private"
          },
          "default_branch": {
            "type": "string",
            "title": "Default Branch"
          },
          "owner": {
            "$ref": "#/components/schemas/ApiUser"
          },
          "has_issues": {
            "type": "boolean",
            "title": "Has Issues"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "default": 0
          },
          "forks_count": {
            "type": "integer",
            "title": "Forks Count"
          },
          "watchers_count": {
            "type": "integer",
            "title": "Watchers Count"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "clone_url": {
            "type": "string",
            "title": "Clone Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "ssh_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ssh Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "full_name",
          "description",
          "watchers",
          "forks",
          "private",
          "default_branch",
          "owner",
          "has_issues",
          "forks_count",
          "watchers_count",
          "url",
          "clone_url",
          "html_url"
        ],
        "title": "ApiRepository",
        "description": "Repository model for API responses."
      },
      "ApiRepositoryCollaborator": {
        "properties": {
          "permission": {
            "type": "string",
            "title": "Permission"
          },
          "user": {
            "$ref": "#/components/schemas/ApiUser"
          }
        },
        "type": "object",
        "required": [
          "permission",
          "user"
        ],
        "title": "ApiRepositoryCollaborator",
        "description": "Collaborator model for API responses."
      },
      "ApiTag": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "commit": {
            "$ref": "#/components/schemas/ApiTagCommit"
          },
          "zipball_url": {
            "type": "string",
            "title": "Zipball Url"
          },
          "tarball_url": {
            "type": "string",
            "title": "Tarball Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "commit",
          "zipball_url",
          "tarball_url"
        ],
        "title": "ApiTag",
        "description": "Tag model for API responses.\n\nNote: Tags API models are kept in repositories.py due to their close relationship\nwith repository operations. If Tags API becomes more complex in the future,\nconsider moving to a separate tags.py file."
      },
      "ApiTagCommit": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "url"
        ],
        "title": "ApiTagCommit",
        "description": "Tag commit model for API responses."
      },
      "ApiUser": {
        "properties": {
          "login": {
            "type": "string",
            "title": "Login"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "default": 0
          },
          "node_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Id"
          },
          "avatar_url": {
            "type": "string",
            "title": "Avatar Url"
          },
          "gravatar_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gravatar Id"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "html_url": {
            "type": "string",
            "title": "Html Url"
          },
          "followers_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Followers Url"
          },
          "following_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Following Url"
          },
          "gists_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gists Url"
          },
          "starred_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starred Url"
          },
          "subscriptions_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscriptions Url"
          },
          "organizations_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organizations Url"
          },
          "repos_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repos Url"
          },
          "events_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events Url"
          },
          "received_events_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Received Events Url"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "site_admin": {
            "type": "boolean",
            "title": "Site Admin"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "hireable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hireable"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "public_repos": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Repos"
          },
          "public_gists": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Gists"
          },
          "followers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Followers"
          },
          "following": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Following"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "suspended": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suspended"
          }
        },
        "type": "object",
        "required": [
          "login",
          "avatar_url",
          "url",
          "html_url",
          "type",
          "site_admin",
          "email",
          "created_at"
        ],
        "title": "ApiUser",
        "description": "User model for API responses."
      },
      "ApiWebhook": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "active": {
            "type": "boolean",
            "title": "Active"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Events"
          },
          "config": {
            "$ref": "#/components/schemas/ApiWebhookConfig"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "type",
          "id",
          "name",
          "active",
          "events",
          "config",
          "url"
        ],
        "title": "ApiWebhook",
        "description": "Webhook model for API responses."
      },
      "ApiWebhookConfig": {
        "properties": {
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "content_type",
          "url"
        ],
        "title": "ApiWebhookConfig",
        "description": "Webhook config model for API responses."
      },
      "BranchProtectionUpdateRequest": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "required_status_checks": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiBranchProtectionStatus"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "enabled"
        ],
        "title": "BranchProtectionUpdateRequest",
        "description": "Model for updating branch protection."
      },
      "CreateAComment": {
        "properties": {
          "body": {
            "type": "string",
            "title": "Body"
          }
        },
        "type": "object",
        "required": [
          "body"
        ],
        "title": "CreateAComment",
        "description": "Model for creating a comment."
      },
      "CreateAFile": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "sha": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sha"
          },
          "branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Branch"
          },
          "committer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiPusher"
              },
              {
                "type": "null"
              }
            ]
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApiPusher"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "message",
          "content"
        ],
        "title": "CreateAFile",
        "description": "Model for creating or updating a file."
      },
      "CreateAGroup": {
        "properties": {
          "login": {
            "type": "string",
            "title": "Login"
          },
          "admin": {
            "type": "string",
            "title": "Admin"
          },
          "profile_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "login",
          "admin"
        ],
        "title": "CreateAGroup",
        "description": "Model for creating a new organization."
      },
      "CreateALabel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "color": {
            "type": "string",
            "title": "Color"
          }
        },
        "type": "object",
        "required": [
          "name",
          "color"
        ],
        "title": "CreateALabel",
        "description": "Model for creating a label."
      },
      "CreateAMilestone": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "state": {
            "type": "string",
            "title": "State",
            "default": "open"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "due_on": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due On"
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "CreateAMilestone",
        "description": "Model for creating a milestone."
      },
      "CreateAPullRequest": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          },
          "draft": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Draft"
          },
          "issue": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issue"
          },
          "head": {
            "type": "string",
            "title": "Head"
          },
          "base": {
            "type": "string",
            "title": "Base"
          },
          "maintainer_can_modify": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Can Modify"
          }
        },
        "type": "object",
        "required": [
          "head",
          "base"
        ],
        "title": "CreateAPullRequest",
        "description": "Model for creating a pull request.\n\nThis API supports two ways to create a pull request:\n\n1. Create a new pull request with title and body:\n   - title: Required. The title of the pull request\n   - head: Required. The name of the branch where your changes are implemented\n   - base: Required. The name of the branch you want the changes pulled into\n   - body: Optional. The contents of the pull request\n   - maintainer_can_modify: Optional. Whether maintainers can modify the pull request\n   - draft: Optional. Whether to create a draft pull request\n\n2. Create a pull request from an existing issue:\n   - issue: Required. The issue number to convert to a pull request\n   - head: Required. The name of the branch where your changes are implemented\n   - base: Required. The name of the branch you want the changes pulled into\n   - maintainer_can_modify: Optional. Whether maintainers can modify the pull request\n\nNote: When using method 2 (issue field), the title and body fields should be omitted\nas they will be taken from the existing issue."
      },
      "CreateARef": {
        "properties": {
          "ref": {
            "type": "string",
            "title": "Ref"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          }
        },
        "type": "object",
        "required": [
          "ref",
          "sha"
        ],
        "title": "CreateARef",
        "description": "Model for creating a Git reference."
      },
      "CreateARelease": {
        "properties": {
          "tag_name": {
            "type": "string",
            "title": "Tag Name"
          },
          "target_commitish": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Commitish"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          },
          "draft": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Draft"
          },
          "prerelease": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prerelease"
          }
        },
        "type": "object",
        "required": [
          "tag_name"
        ],
        "title": "CreateARelease",
        "description": "Model for creating a release.\n\nGitBucket Specific: draft and prerelease fields are ignored."
      },
      "CreateARepository": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "private": {
            "type": "boolean",
            "title": "Private",
            "default": false
          },
          "auto_init": {
            "type": "boolean",
            "title": "Auto Init",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateARepository",
        "description": "Model for creating a new repository."
      },
      "CreateARepositoryWebhook": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "web"
          },
          "config": {
            "$ref": "#/components/schemas/CreateARepositoryWebhookConfig"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Events",
            "default": [
              "push"
            ]
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "CreateARepositoryWebhook",
        "description": "Model for creating a webhook."
      },
      "CreateARepositoryWebhookConfig": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type",
            "default": "form"
          },
          "insecure_ssl": {
            "type": "string",
            "title": "Insecure Ssl",
            "default": "0"
          },
          "secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CreateARepositoryWebhookConfig",
        "description": "Model for webhook configuration when creating a webhook."
      },
      "CreateAStatus": {
        "properties": {
          "state": {
            "type": "string",
            "title": "State"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          },
          "target_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Url"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "state"
        ],
        "title": "CreateAStatus",
        "description": "Model for creating a commit status."
      },
      "CreateAUser": {
        "properties": {
          "login": {
            "type": "string",
            "title": "Login"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "fullName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fullname"
          },
          "isAdmin": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isadmin"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "login",
          "password",
          "email"
        ],
        "title": "CreateAUser",
        "description": "Model for creating a new user."
      },
      "CreateAnIssue": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          },
          "assignees": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Assignees",
            "default": []
          },
          "milestone": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Milestone"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Labels",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "CreateAnIssue",
        "description": "Model for creating a new issue."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MergeAPullRequest": {
        "properties": {
          "commit_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Title"
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          },
          "merge_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Merge Method"
          }
        },
        "type": "object",
        "title": "MergeAPullRequest",
        "description": "Model for merging a pull request."
      },
      "SuccessToMergePrResponse": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "merged": {
            "type": "boolean",
            "title": "Merged"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "sha",
          "merged",
          "message"
        ],
        "title": "SuccessToMergePrResponse",
        "description": "Response model for successful pull request merge."
      },
      "UpdateAPullRequest": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "base": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base"
          },
          "maintainer_can_modify": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Can Modify"
          }
        },
        "type": "object",
        "title": "UpdateAPullRequest",
        "description": "Model for updating a pull request."
      },
      "UpdateARef": {
        "properties": {
          "sha": {
            "type": "string",
            "title": "Sha"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "sha"
        ],
        "title": "UpdateARef",
        "description": "Model for updating a Git reference."
      },
      "UpdateARepositoryWebhook": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "web"
          },
          "config": {
            "$ref": "#/components/schemas/CreateARepositoryWebhookConfig"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Events",
            "default": [
              "push"
            ]
          },
          "add_events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Add Events",
            "default": []
          },
          "remove_events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Remove Events",
            "default": []
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "UpdateARepositoryWebhook",
        "description": "Model for updating a webhook."
      },
      "UpdateAUser": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "hireable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hireable"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          }
        },
        "type": "object",
        "title": "UpdateAUser",
        "description": "Model for updating a user."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "token"
          }
        }
      },
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}